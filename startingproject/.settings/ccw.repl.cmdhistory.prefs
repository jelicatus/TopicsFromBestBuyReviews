cmdhistory=["(def niz (count (nth probamatrice 0)))" "niz" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((nth niz i) suma))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((nth niz i) suma)))" "(def niz '(count (nth probamatrice 0)))" "niz" "(def niz (list (count (nth probamatrice 0))))" "niz" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((nth niz i) suma)))" "((nth niz 0) 5)" "(\= (nth niz 0) 5)" "(let [(nth niz 0) 5])" "(nth niz 0)" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((assoc niz suma)))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((assoc niz suma))))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((conj niz suma))))" "niz" "(conj niz 2)" "(conj 2 niz)" "(conj niz 2)" "(conj\! niz 2)" "(defn conj*\\r\\n  [s x]\\r\\n  (conj (vec s) x))" "(conj* niz 2)" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((conj* niz suma))))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        (conj* niz suma)))" "probamatrice" "niz" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        (conj* niz suma)))" "niz" "(+ 2 2)" "(def niz [])" "niz" "(def matrica [[1 0 1] [0 1 0] [0 0 1]])" "matrica" "(for [i (range 3)] (((def suma (atom 0)) (for [j (range (count matrica))] (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (conj niz suma) (reset\! a 0)))" "(def suma (atom 0))" "suma" "@suma" "(reset\! suma 5)" "@suma" "(reset\! suma 0)" "@suma" "(for [i (range 3)] ( (for [j (range (count matrica))]\\n                       (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (conj niz suma) (reset\! a 0))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (conj niz suma) (reset\! a 0)))" "(conj niz 2)" "niz" "(def niz (atom []))" "@niz" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (reset\! niz (conj niz suma)) (reset\! a 0)))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (reset\! niz (conj @niz suma)) (reset\! a 0)))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ @suma (nth (nth matrica j) i)  ) ))) (reset\! niz (conj @niz @suma)) (reset\! suma 0)))" "(conj @niz 2)" "@niz" "(reset\! niz (conj @niz @suma)" "(reset\! niz (conj @niz @suma))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ @suma (nth (nth matrica j) i)  ) )) (reset\! niz (conj @niz @suma))) (reset\! suma 0)))" "@niz" "(reset\! niz [])" "@suma" "(nth (nth matrica 0) 1)" "(nth (nth matrica 1) 1)" "(+ @suma (nth (nth matrica 1) 1)  )" "(reset\! suma (+ @suma (nth (nth matrica j) i)  ) )" "(reset\! suma (+ @suma (nth (nth matrica 1) 1)  ) )" "(reset\! suma 0)" "@suma" "(count matrica)" "(for [i (range 3)] ( \\n  (\\n    (for [j (range (count matrica))]\\n      (reset\! suma (+ @suma (nth (nth matrica j) i)))\\n     ) \\n    (reset\! niz (conj @niz @suma)) \\n  (reset\! suma 0)\\n  )\\n  )\\n )" "(for [j (range (count matrica))]\\r\\n      (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n     )" "(for [j (range (count matrica))]\\r\\n      (reset\! suma (+ @suma (nth (nth matrica j) 1)))\\r\\n     )" "(for [i (range 3)] ( \\r\\n     \\r\\n       (for [j (range (count matrica))]\\r\\n         (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n        ) \\r\\n       (reset\! niz (conj @niz @suma)) \\r\\n     (reset\! suma 0)\\r\\n     )\\r\\n     \\r\\n    )" "(for [i (range 3)] ( \\r\\n        \\r\\n        \\r\\n          (reset\! niz (conj @niz @suma)) \\r\\n        (reset\! suma 0)\\r\\n  )\\r\\n)" "(for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) 1)))\\r\\n           )" " (for [i (range 3)] ( \\r\\n        \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n         \\r\\n        )\\r\\n        \\r\\n       )" " (for [i (range 3)] ( \\r\\n        \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n         \\r\\n        ) \\r\\n       )" " (for [i (range 3)] \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n        \\r\\n        \\r\\n       )" " (for [i (range 3)]  \\r\\n        \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n          (reset\! niz (conj @niz @suma)) \\r\\n        (reset\! suma 0)\\r\\n       \\r\\n        \\r\\n       )" "(for [i (range 3)]  \\r\\n           \\r\\n            ( (for [j (range (count matrica))]\\r\\n               (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n              ) \\r\\n             (reset\! niz (conj @niz @suma)) \\r\\n           (reset\! suma 0)\\r\\n          )\\n            \\r\\n  )" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma)) \\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "@niz" "(reset\! niz [])" "@niz" "@suma" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma)) \\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "@niz" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "matrica" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n               \\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (doseq\\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (doseq\\n                 \:for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                  \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (doseq\\n                 [\:for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                  \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)]\\r\\n             )\\n               \\r\\n               \\r\\n     )" "@niz" "(for [i (range 3)]  \\r\\n              \\r\\n               (\\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "'(for [i (range 3)]  \\r\\n              \\r\\n               (\\n                  (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                 (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n                \\r\\n               \\r\\n     )" "(list (for [i (range 3)]  \\r\\n              \\r\\n               (\\n                       (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                      (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n                     \\r\\n               \\r\\n     ))" "(def sum-vector (apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]]))" "(apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]])" "(def sum-vector (apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]]))" "sum-vector" "(apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]])" "(((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "(def komentari \\n  (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "sekvencakomentara" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "(def znakoviinterpunkcije [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\"))))))" "(def prociscenikomentari (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\")))))))" "prociscenikomentari" "(def prociscenikomentari (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\")))))))" "prociscenikomentari" "(for [j (range (count prociscenikomentari))] (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words))" "(def tokeni (distinct (flatten (for [ i (range (count prociscenikomentari))] (string/split (string/lower-case (nth prociscenikomentari i)) \#\\" \\")))))" "tokeni" "prociscenikomentari" "(for [j (range (count prociscenikomentari))] (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words))" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "sekvencakomentara" "(def prociscenikomentari (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\")))))))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "(def comments (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def comments (map (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews) \:comment))" "comments" "(def comments (map ((((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews) \:comment)))" "comments" "(def comments (map (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews) \:comment))" "comments" "(def comments (map \:comment ((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def comments (map \:comment ((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def comments (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def sequence-of-reviews (map comments \\\\\:comment)" "(def sequence-of-reviews (map comments \:comment)" "(def sequence-of-reviews (map \:comment comments)" "(def sequence-of-reviews (for [i (range(count reviews-body))] ((komentari i) \:comment))" "(def sequence-of-reviews (for [i (range(count comments))] ((comments i) \:comment))" "comments" "(for [i (range(count reviews-body))] ((reviews-body i) \:comment)" "(for [i (range(count comments))] ((comments i) \:comment)" "(def komentari (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "komentari" "(for [i (range(count komentari))] ((komentari i) \:comment))" "(def comments (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(for [i (range(count comments))] ((comments i) \:comment))" "(def sequence-of-comments (for [i (range(count comments))] ((comments i) \:comment)))" "sequence-of-comments" "(def sequence-of-comments (map string/lower-case (for [i (range(count comments))] ((comments i) \:comment))))" "sequence-of-comments" "(let [review-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))] (def sequence-of-comments (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(let [review-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)] \\n  (def sequence-of-comments (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)] \\n  (def sequence-of-comments (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "sequence-of-comments" "(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"we\\" \\"with\\" \\"she\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"no\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\" \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"we\\" \\"with\\" \\"she\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"no\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(def pre-tokens (for [s sequence-of-reviews] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\")))))))" "(def pre-tokens (for [s sequence-of-comments] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\")))))))" "pre-tokens" "(def pre-tokens (for [j (range (count sequence-of-comments))] (remove-words-from-sentence (nth sequence-of-comments j) forbidden-words))))))" "(def pre-tokens (for [j (range (count sequence-of-comments))] \\n                  (remove-words-from-sentence (nth sequence-of-comments j) forbidden-words)))" "pre-tokens" "(def pre-tokens (map remove-words-from-sentence (map sequence-of-comments) forbidden-words))" "(def pre-tokens (map remove-words-from-sentence (map nth sequence-of-comments) forbidden-words))" "pre-tokens" "(def pre-tokens (map remove-words-from-sentence sequence-of-comments forbidden-words))" "pre-tokens" "(def pre-tokens (for [j (range (count sequence-of-reviews))] (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)))" "(def pre-tokens (for [j (range (count sequence-of-comments))] \\n                  (remove-words-from-sentence (nth sequence-of-comments j) forbidden-words)))" "pre-tokens" "(def tokens (for [s pre-tokens] \\r\\n     (-> s ((apply comp \\r\\n              (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))))" "tokens" "(def tokens (distinct (flatten (for [ i (range (count tokens))] (string/split (nth tokens i) \#\\" \\")))))" "tokens" "(def tokensi (distinct (flatten ( map string/split pre-tokens  \#\\" \\"))))" "(def tokensi (distinct (flatten ( map string/split (pre-tokens  \#\\" \\")))))" "(def w-matrix (for [i (range (count pre-tokens) )] \\r\\n                  (for [j (range (count tokens))] (if (.contains (nth pre-tokens i) (nth tokens j)) 1 0))))" "w-matrix" "(+ 2 20)" "(NMFOptions nmfopt \= new NMFOptions())" "(doto (new java.util.HashMap) (.put \\"a\\" 1) (.put \\"b\\" 2))" "(import jml.clustering.NMF)" "(import jml.clustering.NMF.class)" "(import jml.clustering.NMF)" "(import java.util.Date)" "(import jml.clustering.NMF)" "(import 'jml.clustering.NMF)" "(import jml.clustering.NMF)" "(import java.util.Date)" "(java.util.Date)" "(new java.util.Date)" "(import lib.java.util.Date)" "(ns lib\\r\\n  (\:import [jml.clustering NMF]))" "(import lib.java.util.Date)" "(import jml.clustering.NMF)" "(import java.util.Stack)" "(ns startingproject.app )" "(import jml.clustering.NMF)" "matric" "matrica" "(def data [[3.5 4.4 1.3] [5.3 2.2 0.5] [0.2 0.3 4.1] [1.2 0.4 3.2]])" "data" "(def NMFOptions (new jml.options.NMFOptions))" "NMFOptions" "(import jml.options.NMFOptions)" "(import jml.options.GraphOptions)" "(import jml.options.NMFOptions)" "(jml.options.NMFOptions.)" "(let [nmfopt (jml.options.NMFOptions. 0 10)]\\r\\n  (set\! (.y pt) 100)\\r\\n  (.y pt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n  (set\! (.nClus nmfopt) 2)\\r\\n  (.nClus nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.maxIter nmfopt) 50)\\r\\n     (.maxIter nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.verbose nmfopt) true)\\r\\n     (.verbose nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.calc_OV nmfopt) false)\\r\\n     (.calc_OV nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n     (.epsilon nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\n     (set\! (.calc_OV nmfopt) false)\\r\\n     (.epsilon nmfopt))" "( def nmfopt (jml.options.NMFOptions.))\\r\\n     (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\n     (set\! (.calc_OV nmfopt) false)\\n     (set\! (.verbose nmfopt) true)\\n     (set\! (.maxIter nmfopt) 50)\\n     (set\! (.nClus nmfopt) 2)" "(def nmfclustering (new Clustering nmfopt))" "(def nmfclustering (new jml.clustering.Clustering nmfopt))" "nmfopt" "(def nmfclustering (new jml.clustering.Clustering nmfopt))" "(..verbose nmfopt)" "(.verbose nmfopt)" "(def nmfclustering (new jml.clustering.Clustering(nmfopt)))" "(def nmfclustering (new jml.clustering.NMF nmfopt))" "(nmfclustering/feedData data)" "(def nmfclustering (jml.clustering.Clustering. nmfopt))" "*data-readers*" "data" "(def data [ [3.5, 4.4, 1.3],\\r\\n                    [5.3, 2.2, 0.5],\\r\\n                    [0.2, 0.3, 4.1],\\r\\n                    [1.2, 0.4, 3.2]] )" "data" " ( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "nmfopt" "(new jml.clustering.Clustering)" "(import jml.clustering.NMF)" "(jml.clustering.NMF. )" "(jml.clustering.NMF. nmfopt)" "(def NMFclustering jml.clustering.NMF. nmfopt)" "(def NMFclustering (jml.clustering.NMF. nmfopt))" "NMFclustering" "(NMFclustering/feedData data)" "(.feeddata NMFclustering data)" "(def NMFclustering1 (jml.clustering.Clustering. nmfopt))" "(def NMFclust (jml.clustering.Clustering. nmfopt))" "(def NMFcluster (jml.clustering.NMF. nmfopt))" "(.feeddata NMFclustering data)" "(feeddata NMFclustering data)" "(NMFclustering.feedData data)" "(feedData NMFclustering data)" "(.feedData NMFclustering data)" "(.toChars \\"dfg\\")" "(.toUpperCase \\"dfg\\")" "(.toUpperCase String \\"dfg\\")" "(do (.feedData NMFclustering data))" "(. feedData NMFclustering data)" "data" "(class NMFclustering)" "(. NMFclustering (feedData data))" "(. NMFclustering (runNMF))" "(. NMFclustering (runNMF()))" "(.runNMF NMFclustering )" "(. NMFclustering (main [\\"dfsd \\" \\"dfs\\"]))" "(.runNMF )" "(.NMF NMFclustering)" "(. NMFclustering (NMF))" "(.NMF NMFclustering)" "(.NMF() NMFclustering)" "(. \\"blalba\\" (toUpperCase))" "(. NMFclustering (NMF))" "NMF" "(. NMFclustering (NMF))" "(. NMFclustering (toString))" "(. NMFclustering (toClass))" "(. NMFclustering (toString))" "(jml.clustering.NMF/runNMF)" "NMF" "(def nMFclustering (jml.clustering.NMF. nmfopt))" " ( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def nMFclustering (jml.clustering.NMF. nmfopt))" "(. nMFclustering (toString))" "(. nMFclustering (NMF))" "(. nMFclustering (feedData [12 12 12]))" "(. feedData nMFclustering [12 12 12])" "(.feedData nMFclustering [12 12 12])" "(. nMFclustering (getCenters))" "(. \\"bla bla\\" (charAt 1))" "(. nMFclustering (feedData [12 12 12]))" "(. nMFclustering (feedData [[12] [12] [12]]))" "(class [[1.2 5.3] [4.5 5.2]] )" "(import org.apache.commons.math3.linear.Array2DRowRealMatrix)" "(let [rows (Integer/parseInt (read-line))\\r\\n      cols (Integer/parseInt (read-line))\\r\\n      a (to-array-2d (repeat rows (repeat cols nil)))]\\r\\n  (aset a 0 0 12)\\r\\n  (println \\"Element at 0,0\:\\" (aget a 0 0)))" "2" "3" "4" "(let [rows (Integer/parseInt (read-line))\\r\\n      cols (Integer/parseInt (read-line))\\r\\n      a (to-array-2d (repeat rows (repeat cols nil)))]\\r\\n  (aset a 0 0 12)\\r\\n  (println \\"Element at 0,0\:\\" (aget a 0 0)))" "(def blaa (to-array-2d [[2 1] [4 50]]))" "(class blaa)" "(. nMFclustering (feedData blaa))" "(java.lang.Integer/parseInt 1.2)" "(java.lang.Integer/parseInt \\"2\\")" "(class 2)" "(double [1.2 5.5])" "(double[][] [1.2 5.5])" "(double[] [1.2 5.5])" " (double-array [2 3 2])" "(def blahh (double-array [2 3 2]))" "(class blahh)" "(double-array [(double-array 1 2 7) (double-array 1 2 3) (double-array 1 2 2)])" "(double-array [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" "[(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])]" "(class [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" "(double-array [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" " (double-array [2 3 2])" "(def blahh (double-array [2 3 2]))" "(class blahh)" "(double-array [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" "(into-array (map double-array [[1 2] [3 4]]))" "(def blaz (into-array (map double-array [[1 2] [3 4]])))" "(. nMFclustering (feedData blaz))" "(def data (into-array (map double-array [ [3.5, 4.4, 1.3],\\r\\n                    [5.3, 2.2, 0.5],\\r\\n                    [0.2, 0.3, 4.1],\\r\\n                    [1.2, 0.4, 3.2] ])))" "( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def nmfclustering (jml.clustering.NMF. nmfopt))" "(. nmfclustering (feedData data))" "(. nmfclustering (clustering null))" "(. nmfclustering (clustering nil))" "(println \\"Basis matrix\\")" "(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))" "(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "NMF" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "sequence-of-reviews" "(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                         \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                         \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                          \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                         \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                         \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                          \\"with\\" \\"It\\" \\"She\\" \\"I'm\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)))" "pre-pre-tokens" "(def pre-tokens (for [s pre-tokens] \\r\\n     (-> s ((apply comp \\r\\n              (for [s punctuation-marks] \#(.replace %1 s \\" \\")))))))" "pre-tokens" "(def pre-tokens (for [s pre-pre-tokens] \\r\\n     (-> s ((apply comp \\r\\n              (for [s punctuation-marks] \#(.replace %1 s \\" \\")))))))" "pre-tokens" "(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] (string/split (nth pre-tokens i) \#\\" \\"))))" "(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] (string/split (nth pre-tokens i) \#\\" \\")))))" "tokens" "(def w-matrix (for [i (range (count pre-tokens) )] \\r\\n                  (for [j (range (count tokens))] (if (.contains (nth pre-tokens i) (nth tokens j)) 1 0))))" "w-matrix" "(def frequencies (apply (partial map +) w-matrix))" "(def matrix-of-frequencies (apply (partial map +) w-matrix))" "matrix-of-frequencies" "(def matrix-of-frequencies (apply ( map + w-matrix)))" "(def matrix-of-frequencies (apply  map + w-matrix))" "matrix-of-frequencies" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"It\\" \\"She\\" \\"I'm\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\" \\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def w-matrix (for [i (range (count pre-tokens) )] \\r\\n                  (for [j (range (count tokens))] (if (.contains (nth pre-tokens i) (nth tokens j)) 1 0)))) ;defining the W matrix\\r\\n\\r\\n(def matrix-of-frequencies (apply  map + w-matrix)) ;defining matrix of frequencies" "w-matrix" "matrix-of-frequencies" "sequence-of-reviews" "tokens" "(count tokens)" "(count matrix-of-frequencies)" "(nth tokens 61)" "(nth tokens 67)" "pre-tokens" "pre-pre-tokens" "(count pre-tokens)" "(nth tokens 51)" "(import java.lang.String)" "( def strinngic (java.lang.String.))" "( def strinngic (java.lang.String.) \\"gla bla gbla\\")" "(. strinngic (contains \\"bla\\"))" "strinngic" "( def strinngic (java.lang.String. \\"gla bla gbla\\") )" "(. strinngic (contains \\"bla\\"))" "( def strinngic (java.lang.String. \\"gla gbla\\") )" "(. strinngic (contains \\"bla\\"))" "(contains? \\"bla\\" \\"gbla\\")" "(string/equals \\"bla\\" \\"bla\\")" "(\= \\"bla\\" \\"bla\\")" "(\= \\"bla\\" \\"gbla\\")" "(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))))" "pre-tokens" "(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\")))))" "tokens" "(count tokens)" "(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))" "tokenized-reviews" "(def w-matrix-alternative (for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] (if (\= (nth pre-tokens i) (nth tokens j)) 1 0))))" "w-matrix-alternative" "(def sequence-of-frequencies (apply  map + w-matrix-alternative))" "sequence-of-frequencies" "(def sequence-of-frequencies (apply  map + w-matrix))" "sequence-of-frequencies" "tokenized-reviews" "tokens" "(def w-matrix-alternative (for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] (if (\= (nth tokenized-reviews i) (nth tokens j)) 1 0))))" "w-matrix-alternative" "(def w-matrix-alternative (for [i (range (count tokenized-reviews) )] \\r\\n                  (for [k (range (count (nth tokenized-reviews i)))] ((for [j (range (count tokens))] (if (\= (nth (nth tokenized-reviews i) k) (nth tokens j)) 1 0)\\n                                                                        )))))" "w-matrix-alternative" " (def w-matrix-alternative (for [i (range (count tokenized-reviews) )] \\r\\n                     (for [k (range (count (nth tokenized-reviews i)))] (for [j (range (count tokens))] \\r\\n\\t\\t\\t\\t\\t (if (\= (nth (nth tokenized-reviews i) k) (nth tokens j)) 1 0)\\r\\n                   \\n      ))))" "w-matrix-alternative" "(def alternative-sequence-of-frequencies (apply  map + w-matrix-alternative))" "alternative-sequence-of-frequencies" "(def w-matrix-alternative1 (apply map +(for [i (range (count tokenized-reviews) )] \\r\\n                     (for [k (range (count (nth tokenized-reviews i)))] (for [j (range (count tokens))] \\r\\n\\t\\t\\t\\t\\t (if (\= (nth (nth tokenized-reviews i) k) (nth tokens j)) 1 0)\\r\\n )                                                                          ))))" "w-matrix-alternative1" "(contains? \\"a\\" [\\"ba\\" \\"b\\"])" "(contains? [\\"ba\\" \\"b\\"] \\"a\\")" "(def w-matrix-alternative2 (for [i (range (count tokenized-reviews) )] \\r\\n               (for [j (range (count tokens))] \\r\\n\\t\\t\\t\\t\\t (if (.contains? (nth tokenized-reviews i) (nth tokens j))   (let [suma 0] (\\r\\n\\t\\t\\t\\t\\t (for [k (range (count (nth tokenized-reviews i)))] (if (\= (nth tokens j)  (nth (nth tokenized-reviews i) k) ) (+ suma 1) ) )       )) 0)\\r\\n                                                                           )))" "w-matrix-alternative2" "(def w-matrix-alternative2 (for [i (range (count tokenized-reviews) )] \\r\\n               (for [j (range (count tokens))] \\r\\n\\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j))   (let [suma 0] (\\r\\n\\t\\t\\t\\t\\t (for [k (range (count (nth tokenized-reviews i)))] (if (\= (nth tokens j)  (nth (nth tokenized-reviews i) k) ) (+ suma 1) ) )       )) 0)\\r\\n                                                                           )))" "w-matrix-alternative2" "(for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] \\r\\n   \\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j))   (let [suma 0] (\\r\\n   \\t\\t\\t\\t\\t (for [k (range (count (nth tokenized-reviews i)))] (if (\= (nth tokens j)  (nth (nth tokenized-reviews i) k) ) (+ suma 1) ) )       )) 0)\\r\\n                                                                              ))" "(for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] \\r\\n   \\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j)) 1 0)\\r\\n                                                                              ))" "tokenized-reviews" "tokens" "(def proba (for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] \\r\\n   \\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j)) 1 0)\\r\\n                                                                              )))" "(def sequence-of-frequencies44 (apply  map + proba))" "sequence-of-frequencies44" "(count sequence-of-frequencies44)" "(for [i (range (count tokenized-reviews) )] \\r\\n               (for [j (range (count tokens))] \\r\\n\\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j))   (let [suma 0] (\\r\\n\\t\\t\\t\\t\\t (for [k (range (count (nth tokenized-reviews i)))] (when (\= (nth tokens j)  (nth (nth tokenized-reviews i) k) ) (+ suma 1) ) )       )) 0)\\r\\n                                                                           ))" "(contains? [\\"a\\" \\"a\\" \\"g\\"] \\"a\\")" "(contains? [\\"a\\" \\"g\\"] \\"a\\")" "(contains? \\"a\\" [\\"a\\" \\"g\\"])" "(contains? \\"a\\" [\\"ba\\" \\"b\\"])" "(contains? [\\"ba\\" \\"b\\"] \\"a\\")" "(contains? [\\"a\\" \\"b\\"] \\"a\\")" "(contains [\\"a\\" \\"b\\"] \\"a\\")" "(def proba (for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] \\r\\n   \\t\\t\\t\\t\\t (if (.some\\n               \\n               (nth tokenized-reviews i) (nth tokens j)) 1 0)\\r\\n                                                                              )))" "proba" "(def proba (for [i (range (count tokenized-reviews) )] \\r\\n                  (for [j (range (count tokens))] \\r\\n   \\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j)) 1 0)\\r\\n                                                                              )))" "proba" "(frequencies (\\"a\\" \\"a\\" \\"b\\"))" "(frequencies [\\"a\\" \\"a\\" \\"b\\"])" "(def probica [[\\"bla\\" \\"bla\\" \\"a\\"] [\\"aa\\" \\"b\\" \\"bla\\"]])" "(def tokencici [\\"bla\\" \\"a\\" \\"aa\\" \\"b\\"])" "(def testiranje (for [i (range (count probica) )] \\r\\n                     (for [j (range (count tokencici))] \\r\\n      \\t\\t\\t\\t\\t (if (.contains (nth probica i) (nth tokencici j)) 1 0)" "(def testiranje (for [i (range (count probica) )] \\r\\n                     (for [j (range (count tokencici))] \\r\\n      \\t\\t\\t\\t\\t (if (.contains (nth probica i) (nth tokencici j)) 1 0))))" "testiranje" "(frequencies [\\"bla\\" \\"bla\\" \\"a\\"])" "(frequencies [\\"aa\\" \\"b\\" \\"bla\\"])" "(frequencies [\\"bla\\" \\"bla\\" \\"a\\"] \\"a\\")" "(def testiranje22 (map frequencies probica)" "(def testiranje22 (map frequencies probica))" "testiranje22" "(testiranje22 \\"bla\\")" "((nth testiranje22 0)\\"bla\\")" "(def er \\"bla\\")" "((nth testiranje22 0) er)" "(for [i (range (count tokencici))] (for [j (range (count testiranje22))] ( (nth testiranje22 j) (nth tokencici i))))" "(for [i (range (count testiranje22))] (for [j (range (count tokencici))] ( (nth testiranje22 j) (nth tokencici i))))" "(for [i (range (count testiranje22))] (for [j (range (count tokencici))] ( (nth testiranje22 i) (nth tokencici j))))" "(for [i (range (count testiranje22))] (for [j (range (count tokencici))] (when\\n                                                                           (\= ((nth testiranje22 i) (nth tokencici j)) nil) 0))" "(for [i (range (count testiranje22))] (for [j (range (count tokencici))] (when\\n                                                                           (\= ((nth testiranje22 i) (nth tokencici j)) nil) 0)))" "(replace \\n  (for [i (range (count testiranje22))] (for [j (range (count tokencici))] ( (nth testiranje22 i) (nth tokencici j))))" "(replace \\"a\\" \\"b\\" \\"\\"ab)" "(replace \\"a\\" \\"b\\" \\"ab\\")" "(replace [\\"a\\" nil] nil 0)" "(string/replace [\\"a\\" nil] nil 0)" "(clojure.string/replace [\\"a\\" nil] nil 0)" "(for [i (range (count testiranje22))] (for [j (range (count tokencici))] (if\\n                                                                           (\= ((nth testiranje22 i) (nth tokencici j)) nil) 0 (nth testiranje22 i) (nth tokencici j))))" "(for [i (range (count testiranje22))] (for [j (range (count tokencici))] \\n        (if\\n          (\= ((nth testiranje22 i) (nth tokencici j)) nil) 0 ((nth testiranje22 i) (nth tokencici j)))))" "(nil? nil 9)" "(nil? 9)" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"It\\" \\"She\\" \\"I'm\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\"))))" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))" "\\r\\n\#'startingproject.app/" "tokenized-reviews" "sequence-of-reviews" "pre-tokens" "pre-pre-tokens" "tokens" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\"))))" "tokens" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))" "(def w-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))))" "w-matrix" "tokens" "( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def NMFclustering (jml.clustering.NMF. nmfopt))" "(. NMFclustering (toString))" "(def blaz (into-array (map double-array w-matrix)))" "blaz" "(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n (. nmfclustering (feedData blaz))\\r\\n (. nmfclustering (clustering nil))\\r\\n  (jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n  (jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "(def sequence-of-frequencies (apply  map + w-matrix))" "sequence-of-frequencies" "(for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) 1))))" "(for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))" "w-matrix" "\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))))" "sequence-of-frequencies" "\\r\\n(def sequence-of-frequenciewqs (apply  map + (for [i (range (count testiranje22))] (for [j (range (count tokencici))] \\r\\n    (if (\= ((nth testiranje22 i) (nth tokencici j)) nil) 0  1)))))" "sequence-of-frequenciewqs" "(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i))))" "testiranje22" "(map map w-matrix)" "(map (map w-matrix))" "(for [i (range (count w-matrix))] (for [j (range (count sequence-of-frequencies))] \\n                                    (tf-idf (nth (nth w-matrix i) j) (count sequence-of-reviews) (nth sequence-of-frequencies j))) )" "(count (for [i (range (count w-matrix))] (for [j (range (count sequence-of-frequencies))] \\n                                           (tf-idf (nth (nth w-matrix i) j) (count sequence-of-reviews) (nth sequence-of-frequencies j))) ))" "(def w-matrix (for [i (range (count w-matrix))] (for [j (range (count sequence-of-frequencies))] \\n                                                  (tf-idf (nth (nth w-matrix i) j) (count sequence-of-reviews) (nth sequence-of-frequencies j))) ))" "( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def NMFclustering (jml.clustering.NMF. nmfopt))" "(. NMFclustering (toString))" "(def blaz (into-array (map double-array w-matrix)))" "w-matrix" "(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))" "w-matrix" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\"))))" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))" "w-matrix" " (def data (into-array (map double-array w-matrix)))" "data" " ( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def NMFclustering (jml.clustering.NMF. nmfopt))" "(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n (. nmfclustering (feedData data))\\r\\n (. nmfclustering (clustering nil))" "(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n  (jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "(System/out/println \\"fdsf\\")" "(System/out \\"fdsf\\")" "(. java.lang.System/out (println \\"DD\\"))" "(. java.lang.System/out (println \\"Basis matrix\\"))\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\n(. java.lang.System/out (println \\"Indicator matrix\\"))\\n (jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "(def a (. nmfclustering (getIndicatorMatrix))\\n  \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         \\n         )" "a" "(def b {\\"a\\" \\"1\\" 1 \\"t\\"})" "(b \\"a\\")" "(b \\"1\\")" "(def z (vec b))" "z" "(def g (vec a))" "\\n+\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n+\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\na" "(def blaz (into-array (map double-array a)))" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\"))))" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))\\r\\n\\r\\n( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 15)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "(def matrix (. nmfclustering (getIndicatorMatrix)))" "matrix" "(mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix)))" "(->> (for [r (range 0 (.getRowDimension matrix))]\\r\\n       (vec (.getRow matrix r)))                 \\r\\n     flatten                                       \\r\\n     vec)" "(mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix)))" "(apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix))))" "(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix)))))" "t-matrix" "(max [1 5 8 320])" "(apply max [1 5 8 320])" "tokens" "(map \#(zipmap tokens %) t-matrix)" "(for [i range (count t-matrix)] ((map \#(zipmap tokens %) (nth t-matrix i))))" "(for [i range (count t-matrix)] (map \#(zipmap tokens %) (nth t-matrix i)))" "(map \#(zipmap tokens %) t-matrix )" "(def v (\\"a\\" \\"b\\" \\"c\\"))" "(def v (sequence \\"a\\" \\"b\\" \\"c\\"))" "(def v (sequence (\\"a\\" \\"b\\" \\"c\\")))" "(def v [\\"a\\" \\"b\\" \\"c\\"])" "v" "(def b [[1 2 3] [4 5 6]])" "b" "(map \#(zipmap v %) b )" "(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))" "topics-with-all-tokens" "(sort-by second topics-with-all-tokens)" "( map sort-by second topics-with-all-tokens)" "topics-with-all-tokens" "( map \#(sort-by second %) topics-with-all-tokens)" " ( map \#(sort-by last %) topics-with-all-tokens)" " ( map \#(sort-by first %) topics-with-all-tokens)" "(reverse ( map sort-by second topics-with-all-tokens))" "( map reverse sort-by second topics-with-all-tokens)" "(map reverse ( map sort-by second topics-with-all-tokens))" "(def topics-with-sorted-weight-of-tokens ( map sort-by second topics-with-all-tokens))" "(map take-last 10 topics-with-sorted-weight-of-tokens)" "(map \#(take-last 10 %) topics-with-sorted-weight-of-tokens)" "(map \#(take-last 10 %) [[1 2 53 1 8 1 3 84 3 8 12] [1 452 53 1 8 4551 3 84 3 8 12]])" "(map \#(take-last 2 %) [[1 2 53 1 8 1 3 84 3 8 12] [1 452 53 1 8 4551 3 84 3 8 12]])" "(map \#(take-last 2 %) [([1 2] [53 1] [8 1] [3 84] [8 12]) ([1 452] [53 1] [8 4551] [3 84] [3 8])])\\n))" "(map \#(take-last 2 %) [([1 2] [53 1] [8 1] [3 84] [8 12]) ([1 452] [53 1] [8 4551] [3 84] [3 8])])" "(map \#(take-last 2 %) ([([1 2] [53 1] [8 1] [3 84] [8 12]) ([1 452] [53 1] [8 4551] [3 84] [3 8])]))" "(keys topics-with-sorted-weight-of-tokens)" "(+ 2 1)" "(def a (([\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]) ([\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17])))" "(def a ([[\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]) \\n         ([\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17])])" "(def a (([\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]) \\n         ([\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17]))" "(def a (([\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]) \\n         ([\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17])))" "(def a ([[\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]] \\n         [[\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17]]))" "(def a ([[\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]] \\n         [[\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17]]) )" "(def a [[\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]] \\n         [[\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17]] )" "(def a [[[\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]] \\n         [[\\"fdf\\" 175] [\\"ddfd\\" 1] [\\"fddd\\" 17]]] )" "a" "(take-last 2 [[\\"\\" 0.39309116889507817] [\\"\\\\\\"facetime\\\\\\"\\" 1.7360797790621154] [\\"fd\\" 17]])" "(map \#(take-last 2 %) a)" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\"))))" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))\\r\\n\\r\\n( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))\\r\\n\\r\\n(def matrix  (. nmfclustering (getIndicatorMatrix)))\\r\\n  \\r\\n(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix))))) \\r\\n\\r\\n(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))\\r\\n\\r\\n(def topics-with-sorted-weight-of-tokens ( map sort-by second topics-with-all-tokens))\\r\\n\\r\\n(def 15-words-for-topics (map \#(take-last 15 %) topics-with-sorted-weight-of-tokens))" "topics-with-sorted-weight-of-tokens" "topics-with-all-tokens" "(def topics-with-sorted-weight-of-tokens ( map sort-by second topics-with-all-tokens\\n                                               ))" "topics-with-sorted-weight-of-tokens" "( map sort-by second topics-with-all-tokens)" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\"))))" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))\\r\\n\\r\\n( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))\\r\\n\\r\\n(def matrix  (. nmfclustering (getIndicatorMatrix)))\\r\\n  \\r\\n(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix))))) \\r\\n\\r\\n(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))\\r\\n\\r\\n(def topics-with-sorted-weight-of-tokens ( map sort-by second topics-with-all-tokens))\\r\\n\\r\\n(def 15-words-for-topics (map \#(take-last 15 %) topics-with-sorted-weight-of-tokens))" "topics-with-all-tokens" "topics-with-sorted-weight-of-token" "topics-with-sorted-weight-of-tokens" "topics-with-all-tokens" "( map sort-by second topics-with-all-tokens)" "(map sort-by (second topics-with-all-tokens))" "(map sort-by\\n     topics-with-all-tokens)" "( map sort-by second topics-with-all-tokens)" "( map sort-by topics-with-all-tokens)" "( map sort-by val > topics-with-all-tokens)" "(for [i (range topics-with-all-tokens)] (sort-by val > (nth topics-with-all-tokens i)))" "(nth topics-with-all-tokens 0)" "(sort val > (nth topics-with-all-tokens 0))" "(sort-by val > (nth topics-with-all-tokens 0))" "(map sort-by val > topics-with-all-tokens )" "(map (sort-by val >) topics-with-all-tokens )" "(for [i range](sort-by val > (nth topics-with-all-tokens 0))" "(for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens 0)))" "(for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))" "(def proba (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i))))" "proba" "(map sort-by val > topics-with-all-tokens)" "(map sort-by (second topics-with-all-tokens) topics-with-all-tokens)" "(sort-by val >  topics-with-all-tokens i)" "(map sort-by (map val > topics-with-all-tokens) topics-with-all-tokens)" "(map sort-by (second topics-with-all-tokens) topics-with-all-tokens)" "(def 15-words-for-topics (map \#(take 15 %) proba))" "(def words-for-topics (map \#(take 15 %) proba))" "words-for-topics" "(map sort-by-second topics-with-all-tokens)" "(map sorted-map-by first topics-with-all-tokens)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(+ 2 2)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require [ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\")))) \\r\\n\\r\\n;(def w-matrix (for [i (range (count pre-tokens) )] \\r\\n;                  (for [j (range (count tokens))] (if (.contains (nth pre-tokens i) (nth tokens j)) 1 0)))) ;defining the W matrix\\r\\n\\r\\n;(def w-matrix-alternative (for [i (range (count tokenized-reviews) )] \\r\\n;                  (for [j (range (count tokens))] (if (\= (nth tokenized-reviews i) (nth tokens j)) 1 0)))) \\r\\n\\r\\n;(def sequence-of-frequencies (apply  map + w-matrix)) ;defining matrix of frequencies\\r\\n\\r\\n;(def proba (for [i (range (count tokenized-reviews) )] \\r\\n;                     (for [j (range (count tokens))] \\r\\n;      \\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j)) 1 0)  ))) ;\\r\\n\\r\\n\\r\\n\\r\\n(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))\\r\\n\\r\\n( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))\\r\\n\\r\\n(def matrix  (. nmfclustering (getIndicatorMatrix)))\\r\\n  \\r\\n(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix))))) \\r\\n\\r\\n(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))\\r\\n\\r\\n;(def topics-with-sorted-weight-of-tokens ( map sort-by second topics-with-all-tokens)) ;nesto ne radi odjednom\\r\\n\\r\\n(def topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i))))\\r\\n\\r\\n(def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens))" "words-for-topics" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(+ 2 2)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(use startingproject.app)" "(use 'startingproject.app)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\")))) \\r\\n\\r\\n;(def w-matrix (for [i (range (count pre-tokens) )] \\r\\n;                  (for [j (range (count tokens))] (if (.contains (nth pre-tokens i) (nth tokens j)) 1 0)))) ;defining the W matrix\\r\\n\\r\\n;(def w-matrix-alternative (for [i (range (count tokenized-reviews) )] \\r\\n;                  (for [j (range (count tokens))] (if (\= (nth tokenized-reviews i) (nth tokens j)) 1 0)))) \\r\\n\\r\\n;(def sequence-of-frequencies (apply  map + w-matrix)) ;defining matrix of frequencies\\r\\n\\r\\n;(def proba (for [i (range (count tokenized-reviews) )] \\r\\n;                     (for [j (range (count tokens))] \\r\\n;      \\t\\t\\t\\t\\t (if (.contains (nth tokenized-reviews i) (nth tokens j)) 1 0)  ))) ;\\r\\n\\r\\n\\r\\n\\r\\n(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))\\r\\n\\r\\n( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))\\r\\n\\r\\n(def matrix  (. nmfclustering (getIndicatorMatrix)))\\r\\n  \\r\\n(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix))))) \\r\\n\\r\\n(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))\\r\\n\\r\\n;(def topics-with-sorted-weight-of-tokens ( map sort-by second topics-with-all-tokens)) ;nesto ne radi odjednom\\r\\n\\r\\n(def topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i))))\\r\\n\\r\\n(def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens))" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(use 'startingproject.app)" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require [ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"]) ;maybe this doesn't need to be kept\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\"]) ;define more words later\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n(def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n                      (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words))) ;removing forbidden words\\r\\n\\r\\n(def pre-tokens (for [s pre-pre-tokens] \\r\\n        (-> s ((apply comp \\r\\n                 (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))) ;removing punctuation marks\\r\\n\\r\\n(def tokens (distinct (flatten (for [ i (range (count pre-tokens))] \\r\\n                                 (string/split (nth pre-tokens i) \#\\" \\"))))) ;getting sequence of tokens\\r\\n\\r\\n(def tokenized-reviews (distinct (for [ i (range (count pre-tokens))] \\r\\n                                    (string/split (nth pre-tokens i) \#\\" \\")))) \\r\\n\\r\\n(def frequencies-of-words-reviews (map frequencies tokenized-reviews)) \\r\\n\\r\\n(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))) ;matrix where element ij represents occurences of token j in review i\\r\\n\\r\\n\\r\\n(def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) ;sequence where element i represents the number of reviews that contains token i\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for getting w_ij \\r\\n\\r\\n(def number-of-reviews (count sequence-of-reviews) )\\r\\n\\r\\n(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n    (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))\\r\\n\\r\\n( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)\\r\\n\\t\\t\\r\\n(def NMFclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(def data (into-array (map double-array w-matrix))) \\r\\n \\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n(. nmfclustering (feedData data))\\r\\n(. nmfclustering (clustering nil))\\r\\n(. java.lang.System/out (println \\"Basis Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))\\r\\n(. java.lang.System/out (println \\"Indicator Matrix\:\\"))\\r\\n(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))\\r\\n\\r\\n(def matrix  (. nmfclustering (getIndicatorMatrix)))\\r\\n  \\r\\n(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %))\\r\\n        (range (.getRowDimension matrix))))) \\r\\n\\r\\n(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))" "(def topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i))))\\r\\n\\r\\n(def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens))" "words-for-topics" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require [ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require [ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require [ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(use 'app.clj)" "(use 'app.core)" "(use 'startingproject.app)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(ns startingproject.app \\r\\n     (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n     (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n              [org.httpkit.server \:as httpserver]\\r\\n              [ring.util.response \:as response] ;util je za response\\r\\n              [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n              [compojure.route] ;za definisanje ruta\\r\\n              [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n              [clj-http.client \:as client] ;za skidanje jsona\\r\\n              [clojure.string \:as string])\\r\\n   ;  (import jml.clustering.NMF)\\r\\n     )" "(use 'startingproject.app)" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(use 'startingproject.app)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(use 'startingproject.app)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(client/put \\"http\://api.remix.bestbuy.com/v1/products(longDescription\=iPhone*|sku\=7619002)?show\=sku,name&pageSize\=15&page\=5&apiKey\=YourAPIKey&format\=json\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:throw-exceptions false\\r\\n   \:as \:json})" "(client/put\\n  \\"http\://api.remix.bestbuy.com/v1/products(longDescription\=iPhone*|sku\=7619002)?show\=sku,name&pageSize\=15&page\=5&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:throw-exceptions false\\r\\n   \:as \:json})" "(client/put\\n  \\"http\://api.remix.bestbuy.com/v1/products(longDescription\=iPhone*%7Csku\=7619002)?show\=sku,name&pageSize\=15&page\=5&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:throw-exceptions false\\r\\n   \:as \:json})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:throw-exceptions false\\r\\n   \:as \:json})" "\\r\\n(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "sequence-of-reviews" "((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products) )" "(client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?\\napiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&\\nshow\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,\\ninStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,\\nshortDescription,thumbnailImage,url&pageSize\=50&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json})" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        \\n            \:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json})" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n         \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} )" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n       )" "(json/read (client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n       ))" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers)" "(json/read-str (client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n       ))" "(json/read-json (client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n       ))" "(def a (client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=50&callback\=JSON_CALLBACK&format\=json\\"\\r\\n       ))" "a" "(json/read-json s)" "(json/read-json a)" "(json/read a)" "a" "(map json/read-str a)" "(map \#(json/read-str (val %)) a)" "(json/read a \:key-fn keyword)" "(json/read-str a \:key-fn keyword)" "(json/read-str \\"{\\\\\\"a\\\\\\"\:1,\\\\\\"b\\\\\\"\:2}\\"\\r\\n               \:key-fn keyword)" "(json/read-str a \:key-fn keyword)" "(json/read-str (str a) \:key-fn keyword)" "(json/read-str (str (a \:body)) \:key-fn keyword)" "(json/read-str (a \:body) \:key-fn keyword)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=10&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:products)" "(client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=10&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:body \:products)" "(((client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=10&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json}\\n         ) \:body) \:products)" "(((client/get \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung%20Galaxy*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json}\\n         ) \:body) \:products)" "(((client/get \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung%20Galaxy*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json}\\n         ) \:body))" "((client/get \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung%20Galaxy*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json}\\n        ) \:body)" "(((client/get \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung%20Galaxy*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json}\\n         ) \:body) \:products)" "(defn bla [b] (str \\"la la\\" b \\"aaa\\"))" "(bla eee)" "(bla \\"ee\\")" "(((client/get (str \\"http\://api.remix.bestbuy.com/v1/products\\r\\n(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,\\r\\nmanufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)" "(defn searchforproducts\\r\\n  [product]\\r\\n  (\\r\\n    (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products\\r\\n(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,\\r\\nmanufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)    \\r\\n    )\\r\\n  )" "(searchforproducts \\"iPhone\\")" "(str \\"http\://api.remix.bestbuy.com/v1/products\\r\\n   (name\=\\" \\"iPhone\\" \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,\\r\\n   manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")" "(str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" \\"AAA\\" \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,\\r\\nmanufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")" "(defn searchforproducts\\r\\n  [product]\\r\\n  (\\r\\n    (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)    \\r\\n    )\\r\\n  )" "(searchforproducts \\"aaa\\")" "(defn searchforproducts\\r\\n  [product]\\r\\n\\r\\n    (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)    \\r\\n    )" "(searchforproducts \\"aaa\\")" "(defn searchforproducts\\r\\n  [product]\\r\\n\\r\\n    (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)    \\r\\n    )" "(searchforproducts \\"Samsung\\")" "(searchforproducts \\"IPhone\\")" "(defn searchforproducts\\r\\n  [product]\\r\\n\\r\\n    (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)    \\r\\n    )" "(searchforproducts \\"Samsung\\")" "(defn searchforproducts\\r\\n  [product]\\r\\n\\r\\n    (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,url,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)    \\r\\n    )" "(searchforproducts \\"Samsung\\")" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8081\\n                              \:ip \\"localhost\\" \:join? false})" "(defn searchforproducts\\r\\n  [product]\\r\\n   (reset\! products (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products))    \\r\\n )" "(defn searchforproducts\\r\\n  [product]\\r\\n   (reset\! products (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products))    \\r\\n )" "(searchforproducts \\"Samsung\\")" "(def prd (searchforproducts \\"Samsung\\")\\n  )" "prd" "(map \:name prd)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" " (reset\! products (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products))" "\\n(reset\! products (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" \\"samsung\\" \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products))" "(searchforproducts \\"samsung\\")" "\\r\\n          (fill-products  (searchforproducts \\"samsung\\"))" " (searchforproducts \\"samsung\\")" "\\r\\n          (fill-products products)" "@products" "\\n(((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" \\"samsung\\" \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "\\n(((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" \\"samsung\\" \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)" "products" "(defn searchforproducts [product]\\r\\n   (reset\! products\\r\\n       (first   (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products) )\\r\\n          ) \\r\\n;@products   \\r\\n )" "(((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)" "(def a (first (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)))" "a" "(def a (into {}  (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)))" "a" "(def b (into {}  (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)))" "b" " (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)" "(def b (map into {}  (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)))" "b" "(def b (into {}  (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products)))" "b" " (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products)" "(map into {} (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products))" "(map \#(into {%}) (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products))" "(map \#(into {}) (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products))" "(map \#(into {} %) (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products))" "({\:data (map into {} (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products)) })" "({\:data (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products) } )" "{\: \\"a\\"}" "{\:data (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n               ) \:body) \:products) }" "products" "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nproducts" "(\:data products)" "(\:data @products)" "(fill-products (\:data @products))" "products" "(fill-products (\:data @products))" "(def a (\:data @products))" "a" "(def a1 (a 0))" "a1" "(a1 \:name)" "(def a (\:data @products))" "a" "(fill-products a)" "a1" " (a1 \\n   \:image)" " (a1 \\n   \:manufacturer)" " (a1 \\n   \:regularPrice)" " (a1 \\n   \:url)" " (a1 \\n   \:longDescription)" "products" "(for [i (range (count (\:data @products)))]\\n  ((\:data @products) i ))" "(for [i (range (count (\:data @products)))]\\n  (((\:data @products) i ) \:name))" "(def a [{\:A 1 \:b 2} {\:A 2 \:b 3}])" "a" "(into () a)" "(into {} a)" "(into () a)" "products" "ffirst" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=8731037)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (for [i (range(count reviews-body))]\\r\\n                                                     ((reviews-body i) \:comment)))) )" "sequence-of-reviews" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=8731037)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (map \:comment reviews-body))))" "sequence-of-reviews" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=24246534)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (map \:comment reviews-body))))" "sequence-of-reviews" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)] \\r\\n     (def sequence-of-reviews (map string/lower-case (map \:comment reviews-body))))" "sequence-of-reviews" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body))\\r\\n        ] \\r\\n     (def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n            (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)) ))" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body))\\r\\n        ] \\r\\n     (def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n            (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)) ))" "(+ 2 2)" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body))\\r\\n        ] \\r\\n     (def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n            (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)) ))" "forbidden-words" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body))\\r\\n        ] \\r\\n     (def pre-pre-tokens (for [j (range (count sequence-of-reviews))] \\r\\n            (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)) ))" "pre-pre-tokens" "(map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews)" "forbidden-words" "sequence-of-reviews" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body))\\r\\n        ] \\r\\n     (def pre-pre-tokens ((map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews) )))" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body))\\r\\n        ] \\r\\n     (def pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews) ))" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews)        \\r\\n        ] \\r\\n     (def pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))) ))" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews)        \\r\\n        ] \\r\\n     (def pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))) ))" "pre-tokens" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\"))))))\\r\\n        ] \\r\\n     (def tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens)))))" "tokens" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens)))\\r\\n        \\r\\n        ] \\r\\n     (def tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)) ))" "tokenized-reviews" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (+for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)\\r\\n         ] \\r\\n     (def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))\\r\\n       ) )" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (+for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)\\r\\n         ] \\r\\n     (def frequencies-matrix (map \#(if (\= (%1 %2) nil) (%1 %2)) frequencies-of-words-reviews tokens)\\r\\n       ) )" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (+for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)  ] \\r\\n     (def frequencies-matrix (map \#(if (\= (%1 %2) nil) (%1 %2))) ))" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)  ] \\r\\n     (def frequencies-matrix (map \#(if (\= (%1 %2) nil) (%1 %2))) ))" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)  ] \\r\\n     (def frequencies-matrix (map \#(if (\= (%1 %2) nil) (%1 %2)) frequencies-of-words-reviews tokens) ))" "frequencies-matrix" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)  ] \\r\\n     (def frequencies-matrix  (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))))" "frequencies" "frequencies-matrix" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)  ] \\r\\n     (def frequencies-matrix (map \#(if (\= (%1 %2) nil) (%1 %2)) frequencies-of-words-reviews tokens) ))" "frequencies-matrix" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)  ] \\r\\n     (def frequencies-matrix  (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))))" "frequencies-matrix" "( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        \\r\\n        ] \\r\\n     (def nmfclustering ((jml.clustering.NMF. nmfopt) (. nmfclustering (feedData data)) (. nmfclustering (clustering nil)))) )" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))\\n        ] \\r\\n     (def sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1))))) )" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)\\r\\n        ] \\r\\n     (def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n      )" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)\\r\\n        ] \\r\\n     (def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n      ))" "frequencies-matrix" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        \\r\\n        ] \\r\\n     (def frequencies-of-words-reviews (map frequencies tokenized-reviews)     (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens))        \\r\\n        ] \\r\\n     (def frequencies-of-words-reviews (map frequencies tokenized-reviews)  \\n       (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) \\n                                                                             (nth tokens j)))))" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens))        \\r\\n        ] \\r\\n     (def frequencies-of-words-reviews (map frequencies tokenized-reviews)  \\n       ))" "frequencies-of-words-reviews" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)](def sequence-of-reviews (map string/lower-case (map \:comment reviews-body))))" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=761800)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)](def sequence-of-reviews (map string/lower-case (map \:comment reviews-body))))" "sequence-of-reviews" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews)](def sequence-of-reviews (map string/lower-case (map \:comment reviews-body))))" "sequence-of-reviews" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply  map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "words-for-topics" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=9783171)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )" "  (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=9783171)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "words-for-topics" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8081\\n                              \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8090 \:ip \\"localhost\\" \:join? false})" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=9783171)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n        number-of-reviews (count sequence-of-reviews),\\r\\n        w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n        data (into-array (map double-array w-matrix)),\\r\\n        step1NMF (feed-data nmfclustering data),\\r\\n        step2NMF (set-clustering nmfclustering nil),\\r\\n        matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n        t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n        topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n        topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n        ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) )" "words-for-topics" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=9783171)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json} \:headers) \:body) \:reviews),\\r\\n           sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n           pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n           pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n           tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n           tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n                ] \\r\\n        (def frequencies-of-words-reviews (map frequencies tokenized-reviews)) )" "frequencies-of-words-reviews" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=5qxg5sxjbbxa9maxpfrqvqjw)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)]\\n        (def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        ))" "(let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7642015)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews)]\\n        (def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n        ))" "frequencies-matrix" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))]\\n   (def   sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))) ))" " (let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7642015)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n        sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n        pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n        pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n        tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n        tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n        frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n        frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j)))))]\\n   (def   sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))) ))" "sequence-of-frequencies" " (map + frequencies-matrix)" "(apply map + frequencies-matrix)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8081 \:ip \\"localhost\\" \:join? false})" "http\://api.remix.bestbuy.com/v1/products(name\=Iphone*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,sku,url,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])" "(use (compojure handler [core \:only (GET POST defroutes)]))" "(require [org.httpkit.server \:as httpserver])" "(\:require [org.httpkit.server \:as httpserver])" "(ns startingproject.app \\r\\n     (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n     (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n              [org.httpkit.server \:as httpserver]\\r\\n              [ring.util.response \:as response] ;util je za response\\r\\n              [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n              [compojure.route] ;za definisanje ruta\\r\\n              [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n              [clj-http.client \:as client] ;za skidanje jsona\\r\\n              [clojure.string \:as string]))" "(def reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=2685867)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews))" "(def sequence-of-reviews (map string/lower-case (map \:comment reviews-body)))" "sequence-of-reviews" "reviews-body" "(def reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=7618003)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json} \:headers) \:body) \:reviews))" "reviews-body" "(def sequence-of-reviews (map string/lower-case (map \:comment reviews-body)))" "sequence-of-reviews" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\" \\"yet\\" \\"at\\"]) ;define more words later\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\" \\"/\\"])" "\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(def pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews))" "pre-pre-tokens" "(def pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))))" "pre-tokens" "(def tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))))" "tookens" "tokens" "(def tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)))" "tokenized-reviews" "(def frequencies-of-words-reviews (map frequencies tokenized-reviews))" "frequencies-of-words-reviews" "(def frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))))" "frequencies-matrix" "(defsequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))))" "(def sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))))" "sequence-of-frequencies" "(def number-of-reviews (count sequence-of-reviews))" "(def w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))))" "w-matrix" "(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for Term-Frequency word weighting scheme \\r\\n\\r\\n(def nmfopt (jml.options.NMFOptions.))\\r\\n(set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n(set\! (.calc_OV nmfopt) false)\\r\\n(set\! (.verbose nmfopt) true)\\r\\n(set\! (.maxIter nmfopt) 50)\\r\\n(set\! (.nClus nmfopt) 2)\\r\\n\\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(defn feed-data [nmfclustering data] (. nmfclustering (feedData data)))\\r\\n(defn set-clustering [nmfclustering param] (. nmfclustering (clustering param)))" "(def data (into-array (map double-array w-matrix)))" "(def step1NMF (feed-data nmfclustering data))" "step1NMF" "data" "(defn feed-data [nmfclustering data] (. nmfclustering (feedData data)))" "(import jml.clustering.NMF)" "(defn feed-data [nmfclustering data] (. nmfclustering (feedData data)))" "(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for Term-Frequency word weighting scheme \\r\\n\\r\\n(def nmfopt (jml.options.NMFOptions.))\\r\\n(set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n(set\! (.calc_OV nmfopt) false)\\r\\n(set\! (.verbose nmfopt) true)\\r\\n(set\! (.maxIter nmfopt) 50)\\r\\n(set\! (.nClus nmfopt) 2)\\r\\n\\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(defn feed-data [nmfclustering data] (. nmfclustering (feedData data)))\\r\\n(defn set-clustering [nmfclustering param] (. nmfclustering (clustering param)))" "(def step1NMF (feed-data nmfclustering data))" "step1NMF" "(def step2NMF (set-clustering nmfclustering nil))" "(def matrix  (. nmfclustering (getIndicatorMatrix)))" "matrix" "(def t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))))" "t-matrix" "(def topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ))" "topics-with-all-tokens" "(def topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i))))" "topics-with-all-tokens" "(def topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i))))" "topics-with-sorted-weight-of-tokens" "(def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens))" "words-for-topics" "(defn get-reviews [sku] \\r\\n  ( let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n       sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n       pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n       pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n       tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n       tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n       frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n       frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n       sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n       number-of-reviews (count sequence-of-reviews),\\r\\n       w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n       data (into-array (map double-array w-matrix)),\\r\\n       step1NMF (feed-data nmfclustering data),\\r\\n       step2NMF (set-clustering nmfclustering nil),\\r\\n       matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n       t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n       topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n       topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n       ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) ))" "(get-reviews 7618003)" "words-for-topics" "(defn findouttopics [sku]\\r\\n  (get-reviews sku)  \\r\\n  )" "(findouttopics 7618003)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8081 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n;  (import jml.clustering.NMF)\\r\\n  )\\r\\n\\r\\n;(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})\\r\\n\\r\\n\\r\\n(def products (atom \\"\\"))\\r\\n\\r\\n\\r\\n;(en/deftemplate homepage\\r\\n;  (en/xml-resource \\"index.html\\")\\r\\n;  [request]\\r\\n;  [\:\#listing \:li]\\r\\n;  (en/clone-for [[id url] @mapasajtova] [\:a] (en/content (str id  \\" \\" url)) \\r\\n;                                        [\:a] (en/set-attr \:href (str \\\\/ id))\\r\\n;  ))\\r\\n\\r\\n(en/deftemplate probanje \\r\\n  (en/xml-resource \\"index.html\\")\\r\\n  [request]\\r\\n;  (response/redirect \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n  )\\r\\n\\r\\n(en/deftemplate fill-products \\r\\n  (en/xml-resource \\"index.html\\")\\r\\n  [productss]\\r\\n  [\:\#products] \\r\\n  (en/clone-for[product  productss] \\r\\n     [\:h2.name] (en/content (str (product \:name)))\\r\\n     [\:img.product-image] (en/set-attr \:src (str (product \:image)))\\r\\n     [\:p.manufacturer] (en/content (str (product \:manufacturer)))\\r\\n     [\:p.regularPrice] (en/content (str \\"regularPrice \\" (product \:regularPrice) \\" \\"))\\r\\n     [\:p.onSale] (en/content (str \\"onSale \\" (product \:onSale) \\" \\"))\\r\\n     [\:p.percentSavings] (en/content (str \\"percentSavingse \\" (product \:percentSavings) \\" \\"))\\r\\n     [\:p.salePrice] (en/content (str \\"salePrice \\" (product \:salePrice) \\" \\"))\\r\\n     [\:p.long-description] (en/content (str (product \:longDescription) \\" \\"))                        \\r\\n     [\:a.url] (en/set-attr \:href (str (product \:url)))\\r\\n     [\:input.sku] (en/set-attr \:value (str (product \:sku)))\\r\\n     \\r\\n     )\\r\\n )\\r\\n  \\r\\n\\r\\n\\r\\n;(defn napunimapu\\r\\n ; [url]\\r\\n  ;(let [id (swap\! counter inc) id (java.lang.Long/toString id 36)]\\r\\n  ;(swap\! mapasajtova assoc id url)\\r\\n  ;)  \\r\\n  ;)\\r\\n\\r\\n(defn searchforproducts [product]\\r\\n   (reset\! products\\r\\n    {\:data   (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,sku,url,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products) } )\\r\\n    ;     ) \\r\\n;@products   \\r\\n )\\r\\n\\r\\n\\r\\n\\r\\n(defn malaproba [request] (probanje request))\\r\\n\\r\\n;server se startuje na sledeci nacin\:\\r\\n;(jetty/run-jetty \#'app {\:port 8080 \:join? false})\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n;(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n;  {\:form-params \\"body\\"\\r\\n;   \:content-type \:json\\r\\n;   \:throw-exceptions false\\r\\n;   \:as \:json})\\r\\n\\r\\n\\r\\n(((client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=10&format\=json\\"\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products) ;getting the products\\r\\n\\r\\n(((client/get \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung%20Galaxy*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n           {\:form-params \\"body\\"\\r\\n            \:content-type \:json\\r\\n            \:as \:json}\\r\\n            ) \:body) \:products) ;drugi nacin\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                            \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                            \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                             \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\" \\"yet\\" \\"at\\"]) ;define more words later\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\" \\"/\\"])\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for Term-Frequency word weighting scheme \\r\\n\\r\\n(def nmfopt (jml.options.NMFOptions.))\\r\\n(set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n(set\! (.calc_OV nmfopt) false)\\r\\n(set\! (.verbose nmfopt) true)\\r\\n(set\! (.maxIter nmfopt) 50)\\r\\n(set\! (.nClus nmfopt) 2)\\r\\n\\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(defn feed-data [nmfclustering data] (. nmfclustering (feedData data)))\\r\\n(defn set-clustering [nmfclustering param] (. nmfclustering (clustering param)))\\r\\n\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n;reviews-body - gets the reviews attribute of returned json object using BestBuy API\\r\\n;sequence-of-reviews - returns a sequence whose elements are reviews \\r\\n;pre-pre-tokens - takes out the forbidden words from reviews\\r\\n;pre-tokens - takes out the punctuation marks from reviews\\r\\n;tokens - returns a sequence that contains tokens\\r\\n;tokenized-reviews - returns a sequence where element i contains sequence of tokens that appear in review i\\r\\n;frequencies-of-words-reviews - returns a map where element i is a map that represent review i; keys of review i are tokens that appear in review i and values are frequencies of those tokens in review i\\r\\n;frequencies-matrix - matrix where element ij represents occurences of token j in review i\\r\\n;sequence-of-frequencies - sequence where element i represents the number of reviews that contains token i\\r\\n;number-of-reviews \\r\\n;w-matrix - matrix we get after performing tf-idf \\r\\n;data - turning w-matrix into array of doubles\\r\\n;step1NMF - insert the data (a.k.a the w-matrix) needed to perform NMF\\r\\n;step2NMF - we set clustering; If null, KMeans will be used for initialization\\r\\n;matrix - represents the indicator matrix of NMF, in our case matrix where rows represent the topics\\r\\n;t-matrix - making indicator matrics usable for performing further clojure functions\\r\\n;topics-with-all-tokens - returns a sequence containg a map where element i represents topic i; topics i is also a map whose keys are all tokens and values weights of those tokens \\r\\n;topics-with-sorted-weight-of-tokens - returns a sequence with sorted weight of tokens for each topic\\r\\n;words-for-topics - returns a sequence with 15 most relevant words for each topic\\r\\n(defn get-reviews [sku] \\r\\n  ( let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n        {\:form-params \\"body\\"\\r\\n         \:content-type \:json\\r\\n         \:as \:json} \:headers) \:body) \:reviews),\\r\\n       sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n       pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n       pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n       tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n       tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n       frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n       frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n       sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n         (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n       number-of-reviews (count sequence-of-reviews),\\r\\n       w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n         (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n       data (into-array (map double-array w-matrix)),\\r\\n       step1NMF (feed-data nmfclustering data),\\r\\n       step2NMF (set-clustering nmfclustering nil),\\r\\n       matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n       t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n       topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n       topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n       ] \\r\\n     (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) ))" "(get-reviews 7618003)" "words-for-topics" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8081\\n                              \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8081 \:ip \\"localhost\\" \:join? false})" "(ns startingproject.app \\r\\n  (use (compojure handler [core \:only (GET POST defroutes)])) ;handler za ovo je defroutes \\r\\n  (require ;[ring.adapter.jetty \:as jetty] ;jetty je server\\r\\n           [org.httpkit.server \:as httpserver]\\r\\n           [ring.util.response \:as response] ;util je za response\\r\\n           [net.cgrand.enlive-html \:as en] ;za formatiranje - pritupanje html elemntima, aributima\\r\\n           [compojure.route] ;za definisanje ruta\\r\\n           [clojure.data.json \:as json] ;za parsiranje json-a\\r\\n           [clj-http.client \:as client] ;za skidanje jsona\\r\\n           [clojure.string \:as string])\\r\\n  ;  (import jml.clustering.NMF)\\r\\n  )\\r\\n\\r\\n;(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})\\r\\n\\r\\n\\r\\n(def products (atom \\"\\"))\\r\\n\\r\\n\\r\\n;(en/deftemplate homepage\\r\\n;  (en/xml-resource \\"index.html\\")\\r\\n;  [request]\\r\\n;  [\:\#listing \:li]\\r\\n;  (en/clone-for [[id url] @mapasajtova] [\:a] (en/content (str id  \\" \\" url)) \\r\\n;                                        [\:a] (en/set-attr \:href (str \\\\/ id))\\r\\n;  ))\\r\\n\\r\\n(en/deftemplate probanje \\r\\n  (en/xml-resource \\"index.html\\")\\r\\n  [request]\\r\\n  ;  (response/redirect \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n  )\\r\\n\\r\\n(en/deftemplate fill-products \\r\\n  (en/xml-resource \\"index.html\\")\\r\\n  [productss]\\r\\n  [\:\#products] \\r\\n  (en/clone-for[product  productss] \\r\\n               [\:h2.name] (en/content (str (product \:name)))\\r\\n               [\:img.product-image] (en/set-attr \:src (str (product \:image)))\\r\\n               [\:p.manufacturer] (en/content (str (product \:manufacturer)))\\r\\n               [\:p.regularPrice] (en/content (str \\"regularPrice \\" (product \:regularPrice) \\" \\"))\\r\\n               [\:p.onSale] (en/content (str \\"onSale \\" (product \:onSale) \\" \\"))\\r\\n               [\:p.percentSavings] (en/content (str \\"percentSavingse \\" (product \:percentSavings) \\" \\"))\\r\\n               [\:p.salePrice] (en/content (str \\"salePrice \\" (product \:salePrice) \\" \\"))\\r\\n               [\:p.long-description] (en/content (str (product \:longDescription) \\" \\"))                        \\r\\n               [\:a.url] (en/set-attr \:href (str (product \:url)))\\r\\n               [\:input.sku] (en/set-attr \:value (str (product \:sku)))\\r\\n               \\r\\n               )\\r\\n  )\\r\\n\\r\\n\\r\\n\\r\\n;(defn napunimapu\\r\\n; [url]\\r\\n;(let [id (swap\! counter inc) id (java.lang.Long/toString id 36)]\\r\\n;(swap\! mapasajtova assoc id url)\\r\\n;)  \\r\\n;)\\r\\n\\r\\n(defn searchforproducts [product]\\r\\n  (reset\! products\\r\\n          {\:data   (((client/get (str \\"http\://api.remix.bestbuy.com/v1/products(name\=\\" product \\"*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,sku,url,image,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\")\\r\\n                                 {\:form-params \\"body\\"\\r\\n                                  \:content-type \:json\\r\\n                                  \:as \:json}\\r\\n                                 ) \:body) \:products) } )\\r\\n  ;     ) \\r\\n  ;@products   \\r\\n  )\\r\\n\\r\\n\\r\\n\\r\\n(defn malaproba [request] (probanje request))\\r\\n\\r\\n;server se startuje na sledeci nacin\:\\r\\n;(jetty/run-jetty \#'app {\:port 8080 \:join? false})\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n;(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n;  {\:form-params \\"body\\"\\r\\n;   \:content-type \:json\\r\\n;   \:throw-exceptions false\\r\\n;   \:as \:json})\\r\\n\\r\\n\\r\\n(((client/get \\"https\://api.remix.bestbuy.com/v1/products((categoryPath.id\=pcmcat241600050001))?apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&sort\=regularPrice.asc&show\=sku,color,customerReviewAverage,customerReviewCount,description,details.name,details.value,image,inStoreAvailability,inStoreAvailabilityText,longDescription,manufacturer,mobileUrl,name,onSale,percentSavings,regularPrice,salePrice,shortDescription,thumbnailImage,url&pageSize\=10&format\=json\\"\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n              ) \:body) \:products) ;getting the products\\r\\n\\r\\n(((client/get \\"http\://api.remix.bestbuy.com/v1/products(name\=Samsung%20Galaxy*&categoryPath.name\=%22Cell%20Phones%22)?show\=name,image,subclass,department,class,categoryPath.id,categoryPath.name,manufacturer,regularPrice,onSale,percentSavings,salePrice,longDescription&pageSize\=30&page\=30&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&format\=json\\"\\r\\n              {\:form-params \\"body\\"\\r\\n               \:content-type \:json\\r\\n               \:as \:json}\\r\\n              ) \:body) \:products) ;drugi nacin\\r\\n\\r\\n(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"with\\" \\"it\\" \\"she\\" \\"i'm\\" \\"in\\" \\"if\\" \\"i\\" \\"no\\" \\"yet\\" \\"at\\"]) ;define more words later\\r\\n\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\" \\"/\\"])\\r\\n\\r\\n(defn tf-idf [tf_ij N df_i] (* tf_ij (java.lang.Math/log (/ N df_i)))) ;function for Term-Frequency word weighting scheme \\r\\n\\r\\n(def nmfopt (jml.options.NMFOptions.))\\r\\n(set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n(set\! (.calc_OV nmfopt) false)\\r\\n(set\! (.verbose nmfopt) true)\\r\\n(set\! (.maxIter nmfopt) 50)\\r\\n(set\! (.nClus nmfopt) 2)\\r\\n\\r\\n(def nmfclustering (jml.clustering.NMF. nmfopt))\\r\\n\\r\\n(defn feed-data [nmfclustering data] (. nmfclustering (feedData data)))\\r\\n(defn set-clustering [nmfclustering param] (. nmfclustering (clustering param)))\\r\\n\\r\\n\\r\\n(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                  (string/join \\"|\\")\\r\\n                  (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\")))) ;function for removing forbidden words\\r\\n\\r\\n;reviews-body - gets the reviews attribute of returned json object using BestBuy API\\r\\n;sequence-of-reviews - returns a sequence whose elements are reviews \\r\\n;pre-pre-tokens - takes out the forbidden words from reviews\\r\\n;pre-tokens - takes out the punctuation marks from reviews\\r\\n;tokens - returns a sequence that contains tokens\\r\\n;tokenized-reviews - returns a sequence where element i contains sequence of tokens that appear in review i\\r\\n;frequencies-of-words-reviews - returns a map where element i is a map that represent review i; keys of review i are tokens that appear in review i and values are frequencies of those tokens in review i\\r\\n;frequencies-matrix - matrix where element ij represents occurences of token j in review i\\r\\n;sequence-of-frequencies - sequence where element i represents the number of reviews that contains token i\\r\\n;number-of-reviews \\r\\n;w-matrix - matrix we get after performing tf-idf \\r\\n;data - turning w-matrix into array of doubles\\r\\n;step1NMF - insert the data (a.k.a the w-matrix) needed to perform NMF\\r\\n;step2NMF - we set clustering; If null, KMeans will be used for initialization\\r\\n;matrix - represents the indicator matrix of NMF, in our case matrix where rows represent the topics\\r\\n;t-matrix - making indicator matrics usable for performing further clojure functions\\r\\n;topics-with-all-tokens - returns a sequence containg a map where element i represents topic i; topics i is also a map whose keys are all tokens and values weights of those tokens \\r\\n;topics-with-sorted-weight-of-tokens - returns a sequence with sorted weight of tokens for each topic\\r\\n;words-for-topics - returns a sequence with 15 most relevant words for each topic\\r\\n(defn get-reviews [sku] \\r\\n  ( let [reviews-body (((client/get (str \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=\\" sku \\")?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\")\\r\\n                                    {\:form-params \\"body\\"\\r\\n                                     \:content-type \:json\\r\\n                                     \:as \:json} \:headers) \:body) \:reviews),\\r\\n         sequence-of-reviews (map string/lower-case (map \:comment reviews-body)),\\r\\n         pre-pre-tokens (map \#(remove-words-from-sentence % forbidden-words) sequence-of-reviews),\\r\\n         pre-tokens (for [s pre-pre-tokens] (-> s ((apply comp (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))),\\r\\n         tokens (distinct (flatten (map \#(string/split % \#\\" \\") pre-tokens))),\\r\\n         tokenized-reviews (distinct (map \#(string/split % \#\\" \\") pre-tokens)),\\r\\n         frequencies-of-words-reviews (map frequencies tokenized-reviews),\\r\\n         frequencies-matrix (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n                                                                                    (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0 ((nth frequencies-of-words-reviews i) (nth tokens j))))),\\r\\n         sequence-of-frequencies (apply map + (for [i (range (count frequencies-of-words-reviews))] (for [j (range (count tokens))] \\r\\n                                                                                                      (if (\= ((nth frequencies-of-words-reviews i) (nth tokens j)) nil) 0  1)))),\\r\\n         number-of-reviews (count sequence-of-reviews),\\r\\n         w-matrix (for [i (range (count frequencies-matrix))] (for [j (range (count sequence-of-frequencies))] \\r\\n                                                                (tf-idf (nth (nth frequencies-matrix i) j) number-of-reviews (nth sequence-of-frequencies j)))),\\r\\n         data (into-array (map double-array w-matrix)),\\r\\n         step1NMF (feed-data nmfclustering data),\\r\\n         step2NMF (set-clustering nmfclustering nil),\\r\\n         matrix  (. nmfclustering (getIndicatorMatrix)),\\r\\n         t-matrix (apply mapv vector (mapv \#(vec (.getRow matrix %)) (range (.getRowDimension matrix)))),\\r\\n         topics-with-all-tokens (map \#(zipmap tokens %) t-matrix ),\\r\\n         topics-with-sorted-weight-of-tokens (for [i (range (count topics-with-all-tokens))](sort-by val > (nth topics-with-all-tokens i)))        \\r\\n         ] \\r\\n    (def words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens)) ))" "(get-reviews 7618003)" "(def as 332\\n  )" "(as \\"rere\\")" "(def words-for-topics (atom 0))" " (reset\! words-for-topics (map \#(take 15 %) topics-with-sorted-weight-of-tokens))" " (reset\! words-for-topics \\"dsds\\")" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(httpserver/run-server \#'app {\:port 8082\\n                              \:ip \\"localhost\\" \:join? false})"]
eclipse.preferences.version=1
