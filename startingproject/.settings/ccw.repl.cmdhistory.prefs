cmdhistory=["(startserver)" "(foo)" "(.start startserver)" "(+ 1 1)" "(.start startserver)" "(run-jetty \#'app {\:port 8080 \:join? false})" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(vals @mapasajtova)" "@mapasajtova" "request" "@mapasajtova" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(json/write-str {\:a 1 \:b 2})" "(json/read-str \\"{\\\\\\"a\\\\\\"\:1,\\\\\\"b\\\\\\"\:2}\\")" "(def dzejson \\"{\\\\\\"a\\\\\\"\:1,\\\\\\"b\\\\\\"\:2}\\")" "(json/read-str dzejson)" "(json/read-str dzejson \:a)" "(json/read-str dzejson \\"a\\")" "(json/read-str (dzejson \\"a\\"))" "(json/read-str (dzejson \\"\:a\\"))" "(json/read-str (dzejson \:a))" "(json/read dzejson)" "(read-json dzejson keywordize?)" "(read-json input\\n           keywordize?)" "(read-json dzejson)" "(json/read-str dzejson\\r\\n               \:value-fn my-value-reader\\r\\n               \:key-fn keyword)" "(json/read-str dzejson\\r\\n               \:key-fn keyword)" "((json/read-str dzejson\\r\\n               \:key-fn keyword) \:a)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(def dzejson \\"{\\r\\n  \\"from\\"\: 1,\\r\\n  \\"to\\"\: 10,\\r\\n  \\"total\\"\: 120,\\r\\n  \\"currentPage\\"\: 1,\\r\\n  \\"totalPages\\"\: 12,\\r\\n  \\"queryTime\\"\: \\"0.008\\",\\r\\n  \\"totalTime\\"\: \\"0.064\\",\\r\\n  \\"partial\\"\: false,\\r\\n  \\"canonicalUrl\\"\: \\"/v1/reviews(sku\=1780275)?show\=id,sku,title,comment&format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw\\",\\r\\n  \\"reviews\\"\: [\\r\\n    {\\r\\n      \\"id\\"\: 48576654,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"awesome feel u never expect\\",\\r\\n      \\"comment\\"\: \\"Sure no one will regret on buying this iPad. U can feel the air touch..\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 44758097,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great for business and personal use on the go.\\",\\r\\n      \\"comment\\"\: \\"This was to replace an old iPad that could not keep up with the speed needed today.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 44457588,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great Ipad\\",\\r\\n      \\"comment\\"\: \\"My son is happy with his new IPad, has everything he wanted.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 43552667,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Excellent product\\",\\r\\n      \\"comment\\"\: \\"We purchased a portfolio keypad to go with the iPad Air, and the combination works really great for us. Easy to use and navigate using keypad and touch screen.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 43213861,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Purchased for my Mother-in-law for Christmas\\",\\r\\n      \\"comment\\"\: \\"This i-Pad was an excellent purchase. It is for my 70+ year old mother-in-law for her Christmas present. She has already learned how to \\\\\\"FaceTime\\\\\\" with her children and grandchildren spread all over the globe. Great price for the i-Pad.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42870451,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Nice\\",\\r\\n      \\"comment\\"\: \\"Accidentally ordered the air instead of the air2. Nothing wrong with it, almost kept it, but customer service experience when returning it was excellent.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42867951,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Older Model, great for the price\\",\\r\\n      \\"comment\\"\: \\"I bought older model for discounted price vs newer model. Only 16G but I'm not a power user so I'm happy with the choice.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42805603,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great\\",\\r\\n      \\"comment\\"\: \\"Very good product for all ages. Highly recommended .\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42554284,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great tablet\\",\\r\\n      \\"comment\\"\: \\"What can i say...its a ipad\! 100% awesome\!\! Slim and the picture is cery clear\!\!\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42149883,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great ipad\!\\",\\r\\n      \\"comment\\"\: \\"This come in very handy if you don't use a lot of stuff instead of carrying a lap top, I highly recommend to anyone.\\"\\r\\n    }\\r\\n  ]\\r\\n}\\")" "(def dzejson \#\\"{\\r\\n  \\"from\\"\: 1,\\r\\n  \\"to\\"\: 10,\\r\\n  \\"total\\"\: 120,\\r\\n  \\"currentPage\\"\: 1,\\r\\n  \\"totalPages\\"\: 12,\\r\\n  \\"queryTime\\"\: \\"0.008\\",\\r\\n  \\"totalTime\\"\: \\"0.064\\",\\r\\n  \\"partial\\"\: false,\\r\\n  \\"canonicalUrl\\"\: \\"/v1/reviews(sku\=1780275)?show\=id,sku,title,comment&format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw\\",\\r\\n  \\"reviews\\"\: [\\r\\n    {\\r\\n      \\"id\\"\: 48576654,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"awesome feel u never expect\\",\\r\\n      \\"comment\\"\: \\"Sure no one will regret on buying this iPad. U can feel the air touch..\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 44758097,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great for business and personal use on the go.\\",\\r\\n      \\"comment\\"\: \\"This was to replace an old iPad that could not keep up with the speed needed today.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 44457588,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great Ipad\\",\\r\\n      \\"comment\\"\: \\"My son is happy with his new IPad, has everything he wanted.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 43552667,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Excellent product\\",\\r\\n      \\"comment\\"\: \\"We purchased a portfolio keypad to go with the iPad Air, and the combination works really great for us. Easy to use and navigate using keypad and touch screen.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 43213861,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Purchased for my Mother-in-law for Christmas\\",\\r\\n      \\"comment\\"\: \\"This i-Pad was an excellent purchase. It is for my 70+ year old mother-in-law for her Christmas present. She has already learned how to \\\\\\"FaceTime\\\\\\" with her children and grandchildren spread all over the globe. Great price for the i-Pad.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42870451,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Nice\\",\\r\\n      \\"comment\\"\: \\"Accidentally ordered the air instead of the air2. Nothing wrong with it, almost kept it, but customer service experience when returning it was excellent.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42867951,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Older Model, great for the price\\",\\r\\n      \\"comment\\"\: \\"I bought older model for discounted price vs newer model. Only 16G but I'm not a power user so I'm happy with the choice.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42805603,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great\\",\\r\\n      \\"comment\\"\: \\"Very good product for all ages. Highly recommended .\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42554284,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great tablet\\",\\r\\n      \\"comment\\"\: \\"What can i say...its a ipad\! 100% awesome\!\! Slim and the picture is cery clear\!\!\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42149883,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great ipad\!\\",\\r\\n      \\"comment\\"\: \\"This come in very handy if you don't use a lot of stuff instead of carrying a lap top, I highly recommend to anyone.\\"\\r\\n    }\\r\\n  ]\\r\\n}\\")" "(str \#\\"{\\r\\n  \\"from\\"\: 1,\\r\\n  \\"to\\"\: 10,\\r\\n  \\"total\\"\: 120,\\r\\n  \\"currentPage\\"\: 1,\\r\\n  \\"totalPages\\"\: 12,\\r\\n  \\"queryTime\\"\: \\"0.008\\",\\r\\n  \\"totalTime\\"\: \\"0.064\\",\\r\\n  \\"partial\\"\: false,\\r\\n  \\"canonicalUrl\\"\: \\"/v1/reviews(sku\=1780275)?show\=id,sku,title,comment&format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw\\",\\r\\n  \\"reviews\\"\: [\\r\\n    {\\r\\n      \\"id\\"\: 48576654,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"awesome feel u never expect\\",\\r\\n      \\"comment\\"\: \\"Sure no one will regret on buying this iPad. U can feel the air touch..\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 44758097,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great for business and personal use on the go.\\",\\r\\n      \\"comment\\"\: \\"This was to replace an old iPad that could not keep up with the speed needed today.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 44457588,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great Ipad\\",\\r\\n      \\"comment\\"\: \\"My son is happy with his new IPad, has everything he wanted.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 43552667,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Excellent product\\",\\r\\n      \\"comment\\"\: \\"We purchased a portfolio keypad to go with the iPad Air, and the combination works really great for us. Easy to use and navigate using keypad and touch screen.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 43213861,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Purchased for my Mother-in-law for Christmas\\",\\r\\n      \\"comment\\"\: \\"This i-Pad was an excellent purchase. It is for my 70+ year old mother-in-law for her Christmas present. She has already learned how to \\\\\\"FaceTime\\\\\\" with her children and grandchildren spread all over the globe. Great price for the i-Pad.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42870451,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Nice\\",\\r\\n      \\"comment\\"\: \\"Accidentally ordered the air instead of the air2. Nothing wrong with it, almost kept it, but customer service experience when returning it was excellent.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42867951,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Older Model, great for the price\\",\\r\\n      \\"comment\\"\: \\"I bought older model for discounted price vs newer model. Only 16G but I'm not a power user so I'm happy with the choice.\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42805603,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great\\",\\r\\n      \\"comment\\"\: \\"Very good product for all ages. Highly recommended .\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42554284,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great tablet\\",\\r\\n      \\"comment\\"\: \\"What can i say...its a ipad\! 100% awesome\!\! Slim and the picture is cery clear\!\!\\"\\r\\n    },\\r\\n    {\\r\\n      \\"id\\"\: 42149883,\\r\\n      \\"sku\\"\: 1780275,\\r\\n      \\"title\\"\: \\"Great ipad\!\\",\\r\\n      \\"comment\\"\: \\"This come in very handy if you don't use a lot of stuff instead of carrying a lap top, I highly recommend to anyone.\\"\\r\\n    }\\r\\n  ]\\r\\n}\\")" "(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:throw-exceptions false\\r\\n   \:as \:json})" "(+ 2 2)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:throw-exceptions false\\r\\n   \:as \:json})" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json})" "(client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json})" "(client/put \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:body)" "(client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:body)" "(client/get-headers-from-body \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:body)" "(client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:body)" "((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:headers) \:body \:reviews)" "(((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:headers) \:body) \:reviews)" "(def komentari (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n  {\:form-params \\"body\\"\\r\\n   \:content-type \:json\\r\\n   \:as \:json} \:headers) \:body) \:reviews))" "((json/read-str komentari)" "(json/read-str komentari)" "(komentari \:comment)" "(print komentari)" "(komentari 1)" "(komentari 0)" "(komentari 0 \:comment)" "((komentari 0) \:comment)" "(count komentari)" "(komentari 0 \:comment)" "((komentari 0) \:comment)" "(map (drop \\"the\\") ((komentari 0) \:comment))" "(drop \\"the\\" \\"bla bla the\\")" "(replace \\"la bla the\\" \#\\"the\\" \\"\\")" "(replace \\"la bla the\\" \#\\"the\\" \\" \\")" "(replace \\"la bla the\\" \\"the\\" \\" \\")" "komentari" "((.replace %1 \\"Thah haha the kwa\\" \\"\\") \\"the\\")" "(.replace %1 \\"Thah haha the kwa\\" \\"\\" \\"the\\")" "( \#(.replace %1 \\"Thah haha the kwa\\" \\"\\") \\"the\\")" "(replace \\"gva gva gve\\" \#\\"gve\\" \\"f\\")" "(clojure.string/replace \\"The color is red\\" \#\\"red\\" \\"blue\\")" "(clojure.string/replace \\"The color is red\\" \#\\"red\\" \\"\\")" "(defn izbrisireci [reci] (clojure.string/replace \\"The color is red\\" reci \\"\\"))" "(izbrisireci \#\\"red\\")" "(izbrisireci \\"red\\")" "(izbrisireci \\"red\\" \\"is\\")" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"the\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\"])" "(apply comp (for [\\"Thah haha the kwa\\" forbidden-words] \#(.replace %1 \\"Thah haha the kwa\\" \\"\\")))" "(for [\\"hah haha the kwa\\" forbidden-words] \#(.replace %1 \\"Thah haha the kwa\\" \\"\\"))" "(for [\\"hah haha the kwa\\" forbidden-words] \#(.clojure.string/replace %1 \\"Thah haha the kwa\\" \\"\\"))" "(defn izbrisireci [reci] (clojure.string/replace \\"The color is red\\" reci \\"\\"))" "(izbrisireci \\"red\\" \\"is\\")" "(izbrisireci \\"red\\")" "komentari" "((komentari 0) \:comment)" "(defn izbrisireci [reci] (clojure.string/replace \\"The color is red\\" reci \\"\\"))" "(izbrisireci \\"red\\")" "(for [i (ange(count komentari))] ((komentari i) \:comment))" "(for [i (range(count komentari))] ((komentari i) \:comment))" "(defn sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "forbidden-words" "(for [s strings] \\r\\n  (-> s ((apply comp \\r\\n           (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(for [s sekvencakomentara] \\r\\n  (-> s ((apply comp \\r\\n           (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"Sure\\" \\",\\"])" "(for [s sekvencakomentara] \\r\\n  (-> s ((apply comp \\r\\n           (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"])" "(for [s sekvencakomentara] \\r\\n  (-> s ((apply comp \\r\\n           (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "sekvencakomentara" "(def forbidden-words [\\" \:) \\" \\" the \\" \\" . \\" \\" , \\" \\" a \\" \\" an \\" \\" to \\" \\" that \\" \\" was \\" \\" is \\" \\" will \\" \\n                      \\" on \\" \\" u \\"  \\" you \\" \\" this \\"  \\n                      \\" can \\" \\" that \\" \\" could \\" \\" my \\" \\" his \\" \\" has \\" \\" \: \\" \\" from \\" \\" each \\" \\" of \\" \\" one \\" \\" our \\" \\" we \\"\\n                      \\" he \\" \\" and \\" \\" for \\" \\" us \\" \\" her \\" \\"\\\\\\"FaceTime\\\\\\"\\" \\" it \\" \\" but \\" \\" when \\" \\" its \\" \\" \! \\" \\" cery \\" \\" don't \\"])" "(for [s sekvencakomentara] \\r\\n  (-> s ((apply comp \\r\\n           (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "sekvencakomentara" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"])" "let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\"\\") sekvencakomentara))" "let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.clojure.string/replaceAll % pattern \\"\\") sekvencakomentara))" "(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map (fn [x] (clojure.string/replaceAll x pattern \u201C\u201D)) sekvencakomentara))" "(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map (fn [x] (clojure.string/replace x pattern \u201C\u201D)) sekvencakomentara))" "(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map (fn [x] (clojure.string/replace x pattern \\"\\")) sekvencakomentara))" "forbidden-words" "(let [pattern (->> forbidden-words (map \#(java.util.regex.Pattern/quote %)) \\r\\n                (interpose \\\\|)  (apply str))]\\r\\n  (map \#(.replaceAll % pattern \\"\\") sekvencakomentara))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "sekvencakomentara" "(clojure.string/split \\"Clojure is awesome\!\\" \#\\" \\")" "(clojure.string/split sekvencakomentara \\" \\")" "(clojure.string/split sekvencakomentara \#\\" \\")" "(flatten sekvencakomentara)" "(for [i (range(count sekvencakomentara)] (clojure.string/split (sekvencakomentara i) \#\\" \\"))" "(for [i (range(count sekvencakomentara))] (clojure.string/split (sekvencakomentara i) \#\\" \\"))" "(str/split \\"Clojure is awesome\!\\" \#\\" \\")" "(clojure.string/split \\"Clojure is awesome\!\\" \#\\" \\")" "(for [i (range(count sekvencakomentara))] (clojure.string/split (sekvencakomentara i) \#\\" \\"))" "sekvencakomentara" "(flatten (for [i (range(count sekvencakomentara))] (clojure.string/split (sekvencakomentara i) \#\\" \\")))" "(clojure.string/split (sekvencakomentara 0) \#\\" \\")" "(clojure.string/split \\"Clojure is awesome\!\\" \#\\" \\")" "(sekvencakomentara 0)" "sekvencakomentara" "(nth sekvencakomentara 0)" "(for [i (range(count sekvencakomentara))] (clojure.string/split (nth sekvencakomentara i) \#\\" \\"))" "(for [s sekvencakomentara] \\r\\n  (-> s ((apply comp \\r\\n           (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(for [i (range(count sekvencakomentara))] (clojure.string/split (nth sekvencakomentara i) \#\\" \\"))" "(remove \\"bla\\" \\"gla bla\\")" "(for [i (range(count sekvencakomentara))] (clojure.string/split (nth sekvencakomentara i) \#\\" \\"))" "(flatten (for [i (range(count sekvencakomentara))] (clojure.string/split (nth sekvencakomentara i) \#\\" \\")))" "(def izdvojenereci (flatten (for [i (range(count sekvencakomentara))] (clojure.string/split (nth sekvencakomentara i) \#\\" \\"))))" "izdvojenereci" "(remove forbidden-words izdvojenereci)" "(for [i (range (count forbidden-words))] (remove (forbidden-words i) izdvojenereci))" "(remove (forbidden-words 0) izdvojenereci)" "(remove \\"is\\" izdvojenereci)" "(remove \#{\:foo} [\:foo \:bar])" "(def regexes (map \#(Pattern/compile % Pattern/LITERAL) forbidden-words))" "(use 'clojure.contrib.str-utils)" "(use 'clojure.contrib.string)" "(let [sentence (clojure.string/split (read-line) \#\\" \\")\\r\\n      words (set (clojure.string/split (read-line) \#\\" \\"))]\\r\\n  (clojure.string/join \\" \\" (remove words sentence)))" "(require '[clojure.string \:as string])" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(remove-words-from-sentence \\"Sure no one will regret on buying this iPad. U can feel the air touch..\\" forbidden-words)" "forbidden-words" "(for [i (range count(sekvencakomentara))] (remove-words-from-sentence (sekvencakomentara i) forbidden-words)" "(for [i (range count(sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara i) forbidden-words)" "komentari" "sekvencakomentara" "(sekvencakomentara 1)" "(nth sekvencakomentara 1)" "(for [i (range count(sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara i) forbidden-words))" "(remove-words-from-sentence \\"Sure no one will regret on buying this iPad. U can feel the air touch..\\" forbidden-words)" "(for [i (range count(komentari))] (remove-words-from-sentence ((komentari i) \:comment) forbidden-words))" "(for [i (range count(sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara i) forbidden-words))" "(for [j (range count(sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(range count(sekvencakomentara))" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\"])" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(def znakoviinterpunkcije [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\"))))))" "(def sekvencakomentarabezznakova (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\")))))))" "(for [j (range (count sekvencakomentarabezznakova))] (remove-words-from-sentence (nth sekvencakomentarabezznakova j) forbidden-words))" "(filter \#(re-find \#\\"(?i)a\\" %)\\r\\n          [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(filter \#(re-find \#\\"(?i)b\\" %)\\r\\n          [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(filter \#(re-find \#\\"(?i)eb\\" %)\\r\\n          [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(for [j (range (count sekvencakomentarabezznakova))] (remove-words-from-sentence (nth sekvencakomentarabezznakova j) forbidden-words))" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)" "(def komentari (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "sekvencakomentara" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "(for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\"))))))" "(def znakoviinterpunkcije [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\"))))))" "(def sekvencakomentara (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\")))))))" "sekvencakomentara" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "remove-words-from-sentence" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(def prociscenikomentari (for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words)))" "prociscenikomentari" "(for [ i (range (count prociscenikomentari))] (distinct (nth prociscenikomentari i) ))" "(distinct [ 1 2 2 8])" "(distinct [\\"a\\" \\"b\\" \\"b\\" \\"c\\"])" "prociscenikomentari" "(for [ i (range (count prociscenikomentari))] (string/split (nth prociscenikomentari i) \\" \\"))" "(string/split \\"bla bla bt\\" \\" \\")" "(string/split \\"bla bla bt\\" \#\\" \\")" "(for [ i (range (count prociscenikomentari))] (string/split (nth prociscenikomentari i) \#\\" \\"))" "(flatten (for [ i (range (count prociscenikomentari))] (string/split (nth prociscenikomentari i) \#\\" \\")))" "(distinct (flatten (for [ i (range (count prociscenikomentari))] (string/split (nth prociscenikomentari i) \#\\" \\"))))" "(filter \#(re-find \#\\"(?i)eb\\" %)\\r\\n             [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(defn proba [x y] (filter (re-find \#\\"(?i)\\\\x\\\\\\" y)))" "(defn proba [x y] (filter (re-find \#\\"(?i)a\\" y)))" "(proba [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(defn proba [y] (filter (re-find \#\\"(?i)a\\" y)))" "(proba [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(filter \#(re-find \#\\"(?i)eb\\" %)\\r\\n             [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(defn proba [x y] (filter (re-find \#\\"(?i)\\\\\\\\x\\\\\\\\\\" y)))" "(proba \\"a\\" [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(proba \\"a\\" (\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"))" "(proba \\"a\\" '(\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"))" "(proba \\"a\\" prociscenikomentari)" "(filter \#(re-find \#\\"(?i)eb\\" %)\\r\\n             [\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"])" "(defn proba [x y] (filter (re-find \#\\"(?i)\\\\\\\\x\\\\\\\\\\") y))" "(proba \\"a\\" prociscenikomentari)" "(proba \\"a\\" '(\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"))" "(defn proba [x y] (filter (re-seq \#\\"(?i)\\\\\\\\x\\\\\\\\\\") y))" "(proba \\"a\\" '(\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"))" "(defn proba [x y] (filter (re-find \#\\"(?i)\\\\\\\\x\\\\\\\\\\") y))" "(proba \\"a\\" '(\\"Lion\\" \\"Zebra\\" \\"Buffalo\\" \\"Antelope\\"))" "((re-seq \#\\"(?i)\\\\\\\\x\\\\\\\\\\") y))" "((re-seq \#\\"(?i)\\\\\\\\x\\\\\\\\\\") y)" "(defn proba [x y] (filter (re-find \#\\"(?i)\\\\\\\\x\\\\\\\\\\") y))" "(proba 2 '(\\"bkla\\" 3 2 \\"dsfs\\"))" "\#\\"(?i)\\\\\\\\x\\\\\\\\\\"" "(def komentari (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "komentari" "(string/lower-case \\"Dask KOFod dokf\\")" "sekvencakomentara" "prociscenikomentari" "(distinct (flatten (for [ i (range (count prociscenikomentari))] (string/split (string/lower-case (nth prociscenikomentari i)) \#\\" \\"))))" "(def tokeni (distinct (flatten (for [ i (range (count prociscenikomentari))] (string/split (string/lower-case (nth prociscenikomentari i)) \#\\" \\")))))" "tokeni" "prociscenikomentari" "(def prociscenikomentari (for [i (range (count prociscenikomentari))] (string/lower-case (nth prociscenikomentari i))))" "prociscenikomentari" "(def prociscenikomentari (for [i (range (count prociscenikomentari))] \\n                           (string/lower-case (nth prociscenikomentari i))))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words)))" "prociscenikomentari" "(for [i (range (count prociscenikomentari))] \\n  (string/lower-case (nth prociscenikomentari i)))" "(def cistikomentari (for [i (range (count prociscenikomentari))] \\n                      (string/lower-case (nth prociscenikomentari i))))" "cistikomentari" "tokeni" "(contains? \\"a\\" \\"a b c\\")" "(contains?  \\"a b c\\" \\"a\\")" "(.contains \\"The Band Named Isis\\" \\"Isis\\")" "(.contains \\"a b a\\" \\"a\\")" "(.contains \\"a b a\\" \\"c\\")" "(for [i (range (count cistikomentari) )] \\n  (for [j (range (count tokeni))] (if (.contains (nth cistikomentari i) (nth tokeni j)) 1 0)))" "(defn matrica01 (for [i (range (count cistikomentari) )] \\r\\n                  (for [j (range (count tokeni))] (if (.contains (nth cistikomentari i) (nth tokeni j)) 1 0))))" "(def matrica01 (for [i (range (count cistikomentari) )] \\r\\n                  (for [j (range (count tokeni))] (if (.contains (nth cistikomentari i) (nth tokeni j)) 1 0))))" "matrica01" "([1 0 1] [0 0 1] [0 1 0])" "[[1 0 1] [0 0 1] [0 1 0]]" "(+ [1 0] [0 1])" "(reduce + [1 0] [0 1])" "(def probamatrice [[1 0 1] [0 0 1] [0 1 0]])" "(for [i (range (count probamatrice))] (for [j (range 3)] (+ (nth probamatrice i) j)))" "(for [i (range (count probamatrice))] (for [j (range 3)] (+ (nth (nth probamatrice i) j))))" "(for [i (range 3)] (for [j (range (count probamatrice))] (+ (nth proba j))))" "(for [i (range 3)] (for [j (range (count probamatrice))] (+ (nth probamatrice j))))" "(for [i (range 3)] (for [j (range (count probamatrice))] (+ (nth (nth probamatrice j) i))))" "(def probamatrice [[1 0 1] [0 0 1] [0 1 0]])" "(for [i (range 3)] (for [j (range (count matrica))] (+ suma (nth (nth matrica j) i))))\\r\\n(flatten (for [i (range 3)] (for [j (range (count matrica))] (+ suma (nth (nth matrica j) i)))))" "(def suma 0)" "\\n(flatten (for [i (range 3)] (for [j (range (count matrica))] (+ suma (nth (nth matrica j) i)))))" "\\n(flatten (for [i (range 3)] (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)))))" "probamatrice" "\\n(def frenkvencije (flatten (for [i (range 3)] (for [j (range (count matrica))] (+ suma (nth (nth matrica j) i))))))" "\\n(def frenkvencije (flatten (for [i (range 3)] (for [j (range (count probamatricea))] (+ suma (nth (nth probamatrice j) i))))))" "\\n(def frenkvencije (flatten (for [i (range 3)] (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i))))))" "(def brojac 0)" "\\n(def frenkvencije (for [j (range (count probamatrice))] (+ (nth (nth probamatrice j) brojac))))" "frenkvencije" "(inc brojac)" "\\n(def frenkvencije (for [j (range (count probamatrice))] (+ (nth (nth probamatrice j) brojac))))" "frenkvencije" "(inc brojac)" "(def brojac 2)" "brojac" "\\n(def frenkvencije (for [j (range (count probamatrice))] (+ (nth (nth probamatrice j) brojac))))" "frenkvencije" "(def niz (count (nth probamatrice 0)))" "niz" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((nth niz i) suma))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((nth niz i) suma)))" "(def niz '(count (nth probamatrice 0)))" "niz" "(def niz (list (count (nth probamatrice 0))))" "niz" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((nth niz i) suma)))" "((nth niz 0) 5)" "(\= (nth niz 0) 5)" "(let [(nth niz 0) 5])" "(nth niz 0)" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((assoc niz suma)))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((assoc niz suma))))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((conj niz suma))))" "niz" "(conj niz 2)" "(conj 2 niz)" "(conj niz 2)" "(conj\! niz 2)" "(defn conj*\\r\\n  [s x]\\r\\n  (conj (vec s) x))" "(conj* niz 2)" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        ((conj* niz suma))))" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        (conj* niz suma)))" "probamatrice" "niz" "(for [i (range (count (nth probamatrice 0)))] (let [suma 0] \\n        (for [j (range (count probamatrice))] (+ suma (nth (nth probamatrice j) i)) ) \\n        (conj* niz suma)))" "niz" "(+ 2 2)" "(def niz [])" "niz" "(def matrica [[1 0 1] [0 1 0] [0 0 1]])" "matrica" "(for [i (range 3)] (((def suma (atom 0)) (for [j (range (count matrica))] (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (conj niz suma) (reset\! a 0)))" "(def suma (atom 0))" "suma" "@suma" "(reset\! suma 5)" "@suma" "(reset\! suma 0)" "@suma" "(for [i (range 3)] ( (for [j (range (count matrica))]\\n                       (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (conj niz suma) (reset\! a 0))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (conj niz suma) (reset\! a 0)))" "(conj niz 2)" "niz" "(def niz (atom []))" "@niz" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (reset\! niz (conj niz suma)) (reset\! a 0)))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ suma (nth (nth matrica j) i)  ) ))) (reset\! niz (conj @niz suma)) (reset\! a 0)))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ @suma (nth (nth matrica j) i)  ) ))) (reset\! niz (conj @niz @suma)) (reset\! suma 0)))" "(conj @niz 2)" "@niz" "(reset\! niz (conj @niz @suma)" "(reset\! niz (conj @niz @suma))" "(for [i (range 3)] ( ((for [j (range (count matrica))]\\n                        (reset\! suma (+ @suma (nth (nth matrica j) i)  ) )) (reset\! niz (conj @niz @suma))) (reset\! suma 0)))" "@niz" "(reset\! niz [])" "@suma" "(nth (nth matrica 0) 1)" "(nth (nth matrica 1) 1)" "(+ @suma (nth (nth matrica 1) 1)  )" "(reset\! suma (+ @suma (nth (nth matrica j) i)  ) )" "(reset\! suma (+ @suma (nth (nth matrica 1) 1)  ) )" "(reset\! suma 0)" "@suma" "(count matrica)" "(for [i (range 3)] ( \\n  (\\n    (for [j (range (count matrica))]\\n      (reset\! suma (+ @suma (nth (nth matrica j) i)))\\n     ) \\n    (reset\! niz (conj @niz @suma)) \\n  (reset\! suma 0)\\n  )\\n  )\\n )" "(for [j (range (count matrica))]\\r\\n      (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n     )" "(for [j (range (count matrica))]\\r\\n      (reset\! suma (+ @suma (nth (nth matrica j) 1)))\\r\\n     )" "(for [i (range 3)] ( \\r\\n     \\r\\n       (for [j (range (count matrica))]\\r\\n         (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n        ) \\r\\n       (reset\! niz (conj @niz @suma)) \\r\\n     (reset\! suma 0)\\r\\n     )\\r\\n     \\r\\n    )" "(for [i (range 3)] ( \\r\\n        \\r\\n        \\r\\n          (reset\! niz (conj @niz @suma)) \\r\\n        (reset\! suma 0)\\r\\n  )\\r\\n)" "(for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) 1)))\\r\\n           )" " (for [i (range 3)] ( \\r\\n        \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n         \\r\\n        )\\r\\n        \\r\\n       )" " (for [i (range 3)] ( \\r\\n        \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n         \\r\\n        ) \\r\\n       )" " (for [i (range 3)] \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n        \\r\\n        \\r\\n       )" " (for [i (range 3)]  \\r\\n        \\r\\n          (for [j (range (count matrica))]\\r\\n            (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n           ) \\r\\n          (reset\! niz (conj @niz @suma)) \\r\\n        (reset\! suma 0)\\r\\n       \\r\\n        \\r\\n       )" "(for [i (range 3)]  \\r\\n           \\r\\n            ( (for [j (range (count matrica))]\\r\\n               (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n              ) \\r\\n             (reset\! niz (conj @niz @suma)) \\r\\n           (reset\! suma 0)\\r\\n          )\\n            \\r\\n  )" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma)) \\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "@niz" "(reset\! niz [])" "@niz" "@suma" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma)) \\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "@niz" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "matrica" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n               \\r\\n              (reset\! suma 0)\\r\\n             )\\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (comp \\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (doseq\\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (doseq\\n                 \:for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                  \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "(for [i (range 3)]  \\r\\n              \\r\\n               (doseq\\n                 [\:for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                  \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)]\\r\\n             )\\n               \\r\\n               \\r\\n     )" "@niz" "(for [i (range 3)]  \\r\\n              \\r\\n               (\\n                 (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n               \\r\\n               \\r\\n     )" "'(for [i (range 3)]  \\r\\n              \\r\\n               (\\n                  (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                 (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n                \\r\\n               \\r\\n     )" "(list (for [i (range 3)]  \\r\\n              \\r\\n               (\\n                       (for [j (range (count matrica))]\\r\\n                  (reset\! suma (+ @suma (nth (nth matrica j) i)))\\r\\n                 ) \\r\\n                (reset\! niz (conj @niz @suma))\\n                      (println @niz)\\r\\n              (reset\! suma 0)\\r\\n             )\\n                     \\r\\n               \\r\\n     ))" "(def sum-vector (apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]]))" "(apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]])" "(def sum-vector (apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]]))" "sum-vector" "(apply (partial map +) [[1 0 1] [0 1 0] [0 0 1]])" "(((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "(def komentari \\n  (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "(def sekvencakomentara (for [i (range(count komentari))] ((komentari i) \:comment)))" "sekvencakomentara" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "(def znakoviinterpunkcije [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(for [j (range (count sekvencakomentara))] (remove-words-from-sentence (nth sekvencakomentara j) forbidden-words))" "(for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\"))))))" "(def prociscenikomentari (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\")))))))" "prociscenikomentari" "(def prociscenikomentari (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\")))))))" "prociscenikomentari" "(for [j (range (count prociscenikomentari))] (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words))" "(def tokeni (distinct (flatten (for [ i (range (count prociscenikomentari))] (string/split (string/lower-case (nth prociscenikomentari i)) \#\\" \\")))))" "tokeni" "prociscenikomentari" "(for [j (range (count prociscenikomentari))] (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words))" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "sekvencakomentara" "(def prociscenikomentari (for [s sekvencakomentara] \\r\\n     (-> s ((apply comp \\r\\n              (for [s znakoviinterpunkcije] \#(.replace %1 s \\"\\")))))))" "prociscenikomentari" "(def prociscenikomentari (for [j (range (count prociscenikomentari))] \\n                           (remove-words-from-sentence (nth prociscenikomentari j) forbidden-words)))" "prociscenikomentari" "(def comments (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def comments (map (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews) \:comment))" "comments" "(def comments (map ((((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews) \:comment)))" "comments" "(def comments (map (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews) \:comment))" "comments" "(def comments (map \:comment ((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def comments (map \:comment ((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def comments (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(def sequence-of-reviews (map comments \\\\\:comment)" "(def sequence-of-reviews (map comments \:comment)" "(def sequence-of-reviews (map \:comment comments)" "(def sequence-of-reviews (for [i (range(count reviews-body))] ((komentari i) \:comment))" "(def sequence-of-reviews (for [i (range(count comments))] ((comments i) \:comment))" "comments" "(for [i (range(count reviews-body))] ((reviews-body i) \:comment)" "(for [i (range(count comments))] ((comments i) \:comment)" "(def komentari (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "komentari" "(for [i (range(count komentari))] ((komentari i) \:comment))" "(def comments (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))" "comments" "(for [i (range(count comments))] ((comments i) \:comment))" "(def sequence-of-comments (for [i (range(count comments))] ((comments i) \:comment)))" "sequence-of-comments" "(def sequence-of-comments (map string/lower-case (for [i (range(count comments))] ((comments i) \:comment))))" "sequence-of-comments" "(let [review-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews))] (def sequence-of-comments (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(let [review-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)] \\n  (def sequence-of-comments (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "(let [reviews-body (((client/get \\"http\://api.remix.bestbuy.com/v1/reviews(sku\=1780275)?format\=json&apiKey\=5qxg5sxjbbxa9maxpfrqvqjw&show\=comment\\"\\r\\n     {\:form-params \\"body\\"\\r\\n      \:content-type \:json\\r\\n      \:as \:json} \:headers) \:body) \:reviews)] \\n  (def sequence-of-comments (map string/lower-case (for [i (range(count reviews-body))] ((reviews-body i) \:comment)))) )" "sequence-of-comments" "(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"we\\" \\"with\\" \\"she\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"no\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\" \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"we\\" \\"with\\" \\"she\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"no\\"])" "(def forbidden-words [\\"\:)\\" \\"the\\" \\".\\" \\",\\" \\"a\\" \\"an\\" \\"to\\" \\"that\\" \\"was\\" \\"is\\" \\"will\\" \\"on\\" \\"u\\" \\"you\\" \\"this\\"  \\r\\n                      \\"can\\" \\"that\\" \\"could\\" \\"my\\" \\"his\\" \\"has\\" \\"\:\\" \\"from\\" \\"each\\" \\"of\\" \\"one\\" \\"our\\" \\"we\\"\\r\\n                      \\"he\\" \\"and\\" \\"for\\" \\"us\\" \\"her\\" \\"\\\\\\"FaceTime\\\\\\"\\" \\"it\\" \\"but\\" \\"when\\" \\"its\\" \\"\!\\" \\"cery\\" \\"don't\\"\\r\\n                      \\"U\\" \\"..\\" \\"My\\" \\"We\\" \\"with\\" \\"This\\" \\"It\\" \\"She\\" \\"I'm\\" \\"i\\" \\"in\\" \\"if\\" \\"I\\" \\"no\\"])" "\\r\\n(def punctuation-marks [\\".\\" \\"\!\\" \\"\:\\" \\",\\"])" "(defn remove-words-from-sentence\\r\\n  [sentence words]\\r\\n  (let [pattern (->> (for [w words] (str \\"\\\\\\\\b\\\\\\\\Q\\" w \\"\\\\\\\\E\\\\\\\\b\\"))\\r\\n                     (string/join \\"|\\")\\r\\n                     (format \\"(%s)\\\\\\\\s*\\"))]\\r\\n    (.trim (.replaceAll sentence pattern \\"\\"))))" "(def pre-tokens (for [s sequence-of-reviews] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\")))))))" "(def pre-tokens (for [s sequence-of-comments] \\r\\n     (-> s ((apply comp \\r\\n              (for [s forbidden-words] \#(.replace %1 s \\"\\")))))))" "pre-tokens" "(def pre-tokens (for [j (range (count sequence-of-comments))] (remove-words-from-sentence (nth sequence-of-comments j) forbidden-words))))))" "(def pre-tokens (for [j (range (count sequence-of-comments))] \\n                  (remove-words-from-sentence (nth sequence-of-comments j) forbidden-words)))" "pre-tokens" "(def pre-tokens (map remove-words-from-sentence (map sequence-of-comments) forbidden-words))" "(def pre-tokens (map remove-words-from-sentence (map nth sequence-of-comments) forbidden-words))" "pre-tokens" "(def pre-tokens (map remove-words-from-sentence sequence-of-comments forbidden-words))" "pre-tokens" "(def pre-tokens (for [j (range (count sequence-of-reviews))] (remove-words-from-sentence (nth sequence-of-reviews j) forbidden-words)))" "(def pre-tokens (for [j (range (count sequence-of-comments))] \\n                  (remove-words-from-sentence (nth sequence-of-comments j) forbidden-words)))" "pre-tokens" "(def tokens (for [s pre-tokens] \\r\\n     (-> s ((apply comp \\r\\n              (for [s punctuation-marks] \#(.replace %1 s \\"\\")))))))" "tokens" "(def tokens (distinct (flatten (for [ i (range (count tokens))] (string/split (nth tokens i) \#\\" \\")))))" "tokens" "(def tokensi (distinct (flatten ( map string/split pre-tokens  \#\\" \\"))))" "(def tokensi (distinct (flatten ( map string/split (pre-tokens  \#\\" \\")))))" "(def w-matrix (for [i (range (count pre-tokens) )] \\r\\n                  (for [j (range (count tokens))] (if (.contains (nth pre-tokens i) (nth tokens j)) 1 0))))" "w-matrix" "(+ 2 20)" "(NMFOptions nmfopt \= new NMFOptions())" "(doto (new java.util.HashMap) (.put \\"a\\" 1) (.put \\"b\\" 2))" "(import jml.clustering.NMF)" "(import jml.clustering.NMF.class)" "(import jml.clustering.NMF)" "(import java.util.Date)" "(import jml.clustering.NMF)" "(import 'jml.clustering.NMF)" "(import jml.clustering.NMF)" "(import java.util.Date)" "(java.util.Date)" "(new java.util.Date)" "(import lib.java.util.Date)" "(ns lib\\r\\n  (\:import [jml.clustering NMF]))" "(import lib.java.util.Date)" "(import jml.clustering.NMF)" "(import java.util.Stack)" "(ns startingproject.app )" "(import jml.clustering.NMF)" "matric" "matrica" "(def data [[3.5 4.4 1.3] [5.3 2.2 0.5] [0.2 0.3 4.1] [1.2 0.4 3.2]])" "data" "(def NMFOptions (new jml.options.NMFOptions))" "NMFOptions" "(import jml.options.NMFOptions)" "(import jml.options.GraphOptions)" "(import jml.options.NMFOptions)" "(jml.options.NMFOptions.)" "(let [nmfopt (jml.options.NMFOptions. 0 10)]\\r\\n  (set\! (.y pt) 100)\\r\\n  (.y pt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n  (set\! (.nClus nmfopt) 2)\\r\\n  (.nClus nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.maxIter nmfopt) 50)\\r\\n     (.maxIter nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.verbose nmfopt) true)\\r\\n     (.verbose nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.calc_OV nmfopt) false)\\r\\n     (.calc_OV nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n     (.epsilon nmfopt))" "(let [nmfopt (jml.options.NMFOptions.)]\\r\\n     (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\n     (set\! (.calc_OV nmfopt) false)\\r\\n     (.epsilon nmfopt))" "( def nmfopt (jml.options.NMFOptions.))\\r\\n     (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\n     (set\! (.calc_OV nmfopt) false)\\n     (set\! (.verbose nmfopt) true)\\n     (set\! (.maxIter nmfopt) 50)\\n     (set\! (.nClus nmfopt) 2)" "(def nmfclustering (new Clustering nmfopt))" "(def nmfclustering (new jml.clustering.Clustering nmfopt))" "nmfopt" "(def nmfclustering (new jml.clustering.Clustering nmfopt))" "(..verbose nmfopt)" "(.verbose nmfopt)" "(def nmfclustering (new jml.clustering.Clustering(nmfopt)))" "(def nmfclustering (new jml.clustering.NMF nmfopt))" "(nmfclustering/feedData data)" "(def nmfclustering (jml.clustering.Clustering. nmfopt))" "*data-readers*" "data" "(def data [ [3.5, 4.4, 1.3],\\r\\n                    [5.3, 2.2, 0.5],\\r\\n                    [0.2, 0.3, 4.1],\\r\\n                    [1.2, 0.4, 3.2]] )" "data" " ( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "nmfopt" "(new jml.clustering.Clustering)" "(import jml.clustering.NMF)" "(jml.clustering.NMF. )" "(jml.clustering.NMF. nmfopt)" "(def NMFclustering jml.clustering.NMF. nmfopt)" "(def NMFclustering (jml.clustering.NMF. nmfopt))" "NMFclustering" "(NMFclustering/feedData data)" "(.feeddata NMFclustering data)" "(def NMFclustering1 (jml.clustering.Clustering. nmfopt))" "(def NMFclust (jml.clustering.Clustering. nmfopt))" "(def NMFcluster (jml.clustering.NMF. nmfopt))" "(.feeddata NMFclustering data)" "(feeddata NMFclustering data)" "(NMFclustering.feedData data)" "(feedData NMFclustering data)" "(.feedData NMFclustering data)" "(.toChars \\"dfg\\")" "(.toUpperCase \\"dfg\\")" "(.toUpperCase String \\"dfg\\")" "(do (.feedData NMFclustering data))" "(. feedData NMFclustering data)" "data" "(class NMFclustering)" "(. NMFclustering (feedData data))" "(. NMFclustering (runNMF))" "(. NMFclustering (runNMF()))" "(.runNMF NMFclustering )" "(. NMFclustering (main [\\"dfsd \\" \\"dfs\\"]))" "(.runNMF )" "(.NMF NMFclustering)" "(. NMFclustering (NMF))" "(.NMF NMFclustering)" "(.NMF() NMFclustering)" "(. \\"blalba\\" (toUpperCase))" "(. NMFclustering (NMF))" "NMF" "(. NMFclustering (NMF))" "(. NMFclustering (toString))" "(. NMFclustering (toClass))" "(. NMFclustering (toString))" "(jml.clustering.NMF/runNMF)" "NMF" "(def nMFclustering (jml.clustering.NMF. nmfopt))" " ( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def nMFclustering (jml.clustering.NMF. nmfopt))" "(. nMFclustering (toString))" "(. nMFclustering (NMF))" "(. nMFclustering (feedData [12 12 12]))" "(. feedData nMFclustering [12 12 12])" "(.feedData nMFclustering [12 12 12])" "(. nMFclustering (getCenters))" "(. \\"bla bla\\" (charAt 1))" "(. nMFclustering (feedData [12 12 12]))" "(. nMFclustering (feedData [[12] [12] [12]]))" "(class [[1.2 5.3] [4.5 5.2]] )" "(import org.apache.commons.math3.linear.Array2DRowRealMatrix)" "(let [rows (Integer/parseInt (read-line))\\r\\n      cols (Integer/parseInt (read-line))\\r\\n      a (to-array-2d (repeat rows (repeat cols nil)))]\\r\\n  (aset a 0 0 12)\\r\\n  (println \\"Element at 0,0\:\\" (aget a 0 0)))" "2" "3" "4" "(let [rows (Integer/parseInt (read-line))\\r\\n      cols (Integer/parseInt (read-line))\\r\\n      a (to-array-2d (repeat rows (repeat cols nil)))]\\r\\n  (aset a 0 0 12)\\r\\n  (println \\"Element at 0,0\:\\" (aget a 0 0)))" "(def blaa (to-array-2d [[2 1] [4 50]]))" "(class blaa)" "(. nMFclustering (feedData blaa))" "(java.lang.Integer/parseInt 1.2)" "(java.lang.Integer/parseInt \\"2\\")" "(class 2)" "(double [1.2 5.5])" "(double[][] [1.2 5.5])" "(double[] [1.2 5.5])" " (double-array [2 3 2])" "(def blahh (double-array [2 3 2]))" "(class blahh)" "(double-array [(double-array 1 2 7) (double-array 1 2 3) (double-array 1 2 2)])" "(double-array [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" "[(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])]" "(class [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" "(double-array [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" " (double-array [2 3 2])" "(def blahh (double-array [2 3 2]))" "(class blahh)" "(double-array [(double-array [1 2 7]) (double-array [1 2 3]) (double-array [1 2 2])])" "(into-array (map double-array [[1 2] [3 4]]))" "(def blaz (into-array (map double-array [[1 2] [3 4]])))" "(. nMFclustering (feedData blaz))" "(def data (into-array (map double-array [ [3.5, 4.4, 1.3],\\r\\n                    [5.3, 2.2, 0.5],\\r\\n                    [0.2, 0.3, 4.1],\\r\\n                    [1.2, 0.4, 3.2] ])))" "( def nmfopt (jml.options.NMFOptions.))\\r\\n        (set\! (.epsilon nmfopt) (- java.lang.Math/E 5) )\\r\\n        (set\! (.calc_OV nmfopt) false)\\r\\n        (set\! (.verbose nmfopt) true)\\r\\n        (set\! (.maxIter nmfopt) 50)\\r\\n        (set\! (.nClus nmfopt) 2)" "(def nmfclustering (jml.clustering.NMF. nmfopt))" "(. nmfclustering (feedData data))" "(. nmfclustering (clustering null))" "(. nmfclustering (clustering nil))" "(println \\"Basis matrix\\")" "(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getCenters))))" "(jml.matlab.Matlab/printMatrix (jml.matlab.Matlab/full (. nmfclustering (getIndicatorMatrix))))" "NMF"]
eclipse.preferences.version=1
